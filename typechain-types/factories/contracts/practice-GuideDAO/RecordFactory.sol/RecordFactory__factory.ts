/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  RecordFactory,
  RecordFactoryInterface,
} from "../../../../contracts/practice-GuideDAO/RecordFactory.sol/RecordFactory";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "timeOfCreation",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "recordAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "recordType",
        type: "string",
      },
    ],
    name: "RecordAdded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "record",
        type: "address",
      },
    ],
    name: "createAddressRecord",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "record",
        type: "string",
      },
    ],
    name: "createStringRecord",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "getRecordAtIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "timeOfCreation",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recordAddress",
        type: "address",
      },
      {
        internalType: "string",
        name: "recordType",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getRecordsCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "records",
    outputs: [
      {
        internalType: "uint256",
        name: "timeOfCreation",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "recordAddress",
        type: "address",
      },
      {
        internalType: "string",
        name: "recordType",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "";

type RecordFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RecordFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RecordFactory__factory extends ContractFactory {
  constructor(...args: RecordFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      RecordFactory & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): RecordFactory__factory {
    return super.connect(runner) as RecordFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RecordFactoryInterface {
    return new Interface(_abi) as RecordFactoryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): RecordFactory {
    return new Contract(address, _abi, runner) as unknown as RecordFactory;
  }
}
