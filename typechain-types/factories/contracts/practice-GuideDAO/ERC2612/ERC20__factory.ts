/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  ERC20,
  ERC20Interface,
} from "../../../../contracts/practice-GuideDAO/ERC2612/ERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "initialName",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f80fd5b50604051610b3b380380610b3b83398101604081905261002e916100ec565b600361003a83826101d5565b50600461004782826101d5565b50505061028f565b634e487b7160e01b5f52604160045260245ffd5b5f82601f830112610072575f80fd5b81516001600160401b0381111561008b5761008b61004f565b604051601f8201601f19908116603f011681016001600160401b03811182821017156100b9576100b961004f565b6040528181528382016020018510156100d0575f80fd5b8160208501602083015e5f918101602001919091529392505050565b5f80604083850312156100fd575f80fd5b82516001600160401b03811115610112575f80fd5b61011e85828601610063565b602085015190935090506001600160401b0381111561013b575f80fd5b61014785828601610063565b9150509250929050565b600181811c9082168061016557607f821691505b60208210810361018357634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156101d057805f5260205f20601f840160051c810160208510156101ae5750805b601f840160051c820191505b818110156101cd575f81556001016101ba565b50505b505050565b81516001600160401b038111156101ee576101ee61004f565b610202816101fc8454610151565b84610189565b6020601f821160018114610234575f831561021d5750848201515b5f19600385901b1c1916600184901b1784556101cd565b5f84815260208120601f198516915b828110156102635787850151825560209485019460019092019101610243565b508482101561028057868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b61089f8061029c5f395ff3fe608060405234801561000f575f80fd5b50600436106100c4575f3560e01c8063395093511161007d578063a457c2d711610058578063a457c2d71461017f578063a9059cbb14610192578063dd62ed3e146101a5575f80fd5b8063395093511461013c57806370a082311461014f57806395d89b4114610177575f80fd5b806318160ddd116100ad57806318160ddd1461010957806323b872dd1461011b578063313ce5671461012e575f80fd5b806306fdde03146100c8578063095ea7b3146100e6575b5f80fd5b6100d06101dd565b6040516100dd91906106bf565b60405180910390f35b6100f96100f436600461072d565b61026d565b60405190151581526020016100dd565b6002545b6040519081526020016100dd565b6100f9610129366004610755565b610286565b6040515f81526020016100dd565b6100f961014a36600461072d565b6102a9565b61010d61015d36600461078f565b6001600160a01b03165f9081526020819052604090205490565b6100d06102e7565b6100f961018d36600461072d565b6102f6565b6100f96101a036600461072d565b61037e565b61010d6101b33660046107af565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b6060600380546101ec906107e0565b80601f0160208091040260200160405190810160405280929190818152602001828054610218906107e0565b80156102635780601f1061023a57610100808354040283529160200191610263565b820191905f5260205f20905b81548152906001019060200180831161024657829003601f168201915b5050505050905090565b5f3361027a81858561038b565b60019150505b92915050565b5f33610293858285610497565b61029e858585610546565b506001949350505050565b335f8181526001602090815260408083206001600160a01b038716845290915281205490919061027a90829086906102e2908790610831565b61038b565b6060600480546101ec906107e0565b335f8181526001602090815260408083206001600160a01b0387168452909152812054909190838110156103715760405162461bcd60e51b815260206004820152601f60248201527f616c6c6f77616e63652073686f756c64206265203e3d2073756256616c75650060448201526064015b60405180910390fd5b61029e828686840361038b565b5f3361027a818585610546565b6001600160a01b0383166103e15760405162461bcd60e51b815260206004820152601560248201527f4f776e65722063616e6e6f74206265207a65726f2100000000000000000000006044820152606401610368565b6001600160a01b0382166104375760405162461bcd60e51b815260206004820152601760248201527f5370656e6465722063616e6e6f74206265207a65726f210000000000000000006044820152606401610368565b6001600160a01b038381165f8181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038381165f908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461054057818110156105335760405162461bcd60e51b815260206004820152601660248201527f696e73756666696369656e7420616c6c6f77616e6365000000000000000000006044820152606401610368565b610540848484840361038b565b50505050565b6001600160a01b03831661059c5760405162461bcd60e51b815260206004820152601960248201527f46726f6d2063616e6e6f74206265207a65726f206164647221000000000000006044820152606401610368565b6001600160a01b0382166105f25760405162461bcd60e51b815260206004820152601760248201527f546f2063616e6e6f74206265207a65726f2061646472210000000000000000006044820152606401610368565b6001600160a01b0383165f908152602081905260409020548181101561065a5760405162461bcd60e51b815260206004820152601360248201527f696e73756666696369656e742066756e647321000000000000000000000000006044820152606401610368565b6001600160a01b038481165f81815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610540565b602081525f82518060208401528060208501604085015e5f6040828501015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011684010191505092915050565b80356001600160a01b0381168114610728575f80fd5b919050565b5f806040838503121561073e575f80fd5b61074783610712565b946020939093013593505050565b5f805f60608486031215610767575f80fd5b61077084610712565b925061077e60208501610712565b929592945050506040919091013590565b5f6020828403121561079f575f80fd5b6107a882610712565b9392505050565b5f80604083850312156107c0575f80fd5b6107c983610712565b91506107d760208401610712565b90509250929050565b600181811c908216806107f457607f821691505b60208210810361082b577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b50919050565b80820180821115610280577f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffdfea2646970667358221220a926aa6d850fca097924c7f329a1386069fe8ec975fef57454028efb7957c66964736f6c634300081a0033";

type ERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20__factory extends ContractFactory {
  constructor(...args: ERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    initialName: string,
    symbol_: string,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(initialName, symbol_, overrides || {});
  }
  override deploy(
    initialName: string,
    symbol_: string,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(initialName, symbol_, overrides || {}) as Promise<
      ERC20 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ERC20__factory {
    return super.connect(runner) as ERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20Interface {
    return new Interface(_abi) as ERC20Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): ERC20 {
    return new Contract(address, _abi, runner) as unknown as ERC20;
  }
}
