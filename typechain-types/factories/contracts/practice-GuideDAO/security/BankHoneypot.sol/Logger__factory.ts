/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  Logger,
  LoggerInterface,
} from "../../../../../contracts/practice-GuideDAO/security/BankHoneypot.sol/Logger";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "initiator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "eventCode",
        type: "uint256",
      },
    ],
    name: "Log",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "initiator",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "eventCode",
        type: "uint256",
      },
    ],
    name: "log",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f80fd5b5060f78061001b5f395ff3fe6080604052348015600e575f80fd5b50600436106026575f3560e01c80638309e8a814602a575b5f80fd5b603960353660046081565b603b565b005b604051819073ffffffffffffffffffffffffffffffffffffffff8416907ff950957d2407bed19dc99b718b46b4ce6090c05589006dfb86fd22c34865b23e905f90a35050565b5f80604083850312156091575f80fd5b823573ffffffffffffffffffffffffffffffffffffffff8116811460b3575f80fd5b94602093909301359350505056fea264697066735822122073927378d0596993af7734621960fa100c9993c17dbb1b8d478e0426181139e864736f6c634300081a0033";

type LoggerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LoggerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Logger__factory extends ContractFactory {
  constructor(...args: LoggerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Logger & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Logger__factory {
    return super.connect(runner) as Logger__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LoggerInterface {
    return new Interface(_abi) as LoggerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Logger {
    return new Contract(address, _abi, runner) as unknown as Logger;
  }
}
