/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { PayableOverrides } from "../../../../../common";
import type {
  Hack,
  HackInterface,
} from "../../../../../contracts/practice-GuideDAO/security/AuctionTxOrigin.sol/Hack";

const _abi = [
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_toHack",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "getYourMoney",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60806040526040516102253803806102258339810160408190526020916043565b5f80546001600160a01b0319166001600160a01b0392909216919091179055606e565b5f602082840312156052575f80fd5b81516001600160a01b03811681146067575f80fd5b9392505050565b6101aa8061007b5f395ff3fe608060405260043610610020575f3560e01c8063fcbb847d1461002b575f80fd5b3661002757005b5f80fd5b348015610036575f80fd5b5061003f610041565b005b6040515f90339047908381818185875af1925050503d805f8114610080576040519150601f19603f3d011682016040523d82523d5f602084013e610085565b606091505b50509050806100f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f63616e60742073656e6400000000000000000000000000000000000000000000604482015260640160405180910390fd5b5f546040517f51cff8d900000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff909116906351cff8d9906024015f604051808303815f87803b15801561015b575f80fd5b505af115801561016d573d5f803e3d5ffd5b505050505056fea2646970667358221220f0d6f6fab9687727812ef8e5a128db2ba57e88d202589e85f082d5b5f12f817164736f6c634300081a0033";

type HackConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HackConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Hack__factory extends ContractFactory {
  constructor(...args: HackConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _toHack: AddressLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_toHack, overrides || {});
  }
  override deploy(
    _toHack: AddressLike,
    overrides?: PayableOverrides & { from?: string }
  ) {
    return super.deploy(_toHack, overrides || {}) as Promise<
      Hack & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Hack__factory {
    return super.connect(runner) as Hack__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HackInterface {
    return new Interface(_abi) as HackInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Hack {
    return new Contract(address, _abi, runner) as unknown as Hack;
  }
}
