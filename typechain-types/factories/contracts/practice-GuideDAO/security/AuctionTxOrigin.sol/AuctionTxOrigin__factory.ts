/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { PayableOverrides } from "../../../../../common";
import type {
  AuctionTxOrigin,
  AuctionTxOriginInterface,
} from "../../../../../contracts/practice-GuideDAO/security/AuctionTxOrigin.sol/AuctionTxOrigin";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60806040525f80546001600160a01b0319163317905561020b806100225f395ff3fe608060405260043610610020575f3560e01c806351cff8d91461002b575f80fd5b3661002757005b5f80fd5b348015610036575f80fd5b5061004a61004536600461019b565b61004c565b005b5f5473ffffffffffffffffffffffffffffffffffffffff1633146100d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f6e6f7420616e206f776e6572210000000000000000000000000000000000000060448201526064015b60405180910390fd5b5f8173ffffffffffffffffffffffffffffffffffffffff16476040515f6040518083038185875af1925050503d805f8114610127576040519150601f19603f3d011682016040523d82523d5f602084013e61012c565b606091505b5050905080610197576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f63616e60742073656e640000000000000000000000000000000000000000000060448201526064016100c8565b5050565b5f602082840312156101ab575f80fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146101ce575f80fd5b939250505056fea26469706673582212200ef5fc1edd6af86933401622c8613ee4673eaf6e970b07995dde1833b9277d4b64736f6c634300081a0033";

type AuctionTxOriginConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AuctionTxOriginConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AuctionTxOrigin__factory extends ContractFactory {
  constructor(...args: AuctionTxOriginConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: PayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      AuctionTxOrigin & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): AuctionTxOrigin__factory {
    return super.connect(runner) as AuctionTxOrigin__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AuctionTxOriginInterface {
    return new Interface(_abi) as AuctionTxOriginInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): AuctionTxOrigin {
    return new Contract(address, _abi, runner) as unknown as AuctionTxOrigin;
  }
}
