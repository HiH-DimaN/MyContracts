/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  Error,
  ErrorInterface,
} from "../../../../contracts/PracticeModule1/LessonError.sol/Error";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "withdrawAmount",
        type: "uint256",
      },
    ],
    name: "InsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "num",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "testAssert",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_withdrawAmount",
        type: "uint256",
      },
    ],
    name: "testCustomError",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_i",
        type: "uint256",
      },
    ],
    name: "testRequire",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_i",
        type: "uint256",
      },
    ],
    name: "testRevert",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f80fd5b506101f88061001c5f395ff3fe608060405234801561000f575f80fd5b5060043610610064575f3560e01c80634e70b1dc1161004d5780634e70b1dc1461008557806375f7286c1461009f578063b8bd717f14610068575f80fd5b806320987767146100685780632b813bc01461007d575b5f80fd5b61007b61007636600461017e565b6100b2565b005b61007b610124565b61008d5f5481565b60405190815260200160405180910390f35b61007b6100ad36600461017e565b610135565b600a8111610121576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f496e707574206d7573742062652067726561746572207468616e20313000000060448201526064015b60405180910390fd5b50565b5f541561013357610133610195565b565b478181101561017a576040517fcf4791810000000000000000000000000000000000000000000000000000000081526004810182905260248101839052604401610118565b5050565b5f6020828403121561018e575f80fd5b5035919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52600160045260245ffdfea2646970667358221220be8d41501019c453f096dd15df46f1e1f9b02839e112641bb986122d068c49ac64736f6c634300081a0033";

type ErrorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ErrorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Error__factory extends ContractFactory {
  constructor(...args: ErrorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Error & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Error__factory {
    return super.connect(runner) as Error__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ErrorInterface {
    return new Interface(_abi) as ErrorInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Error {
    return new Contract(address, _abi, runner) as unknown as Error;
  }
}
