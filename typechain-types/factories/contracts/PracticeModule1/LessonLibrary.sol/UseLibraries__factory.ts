/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  UseLibraries,
  UseLibrariesInterface,
} from "../../../../contracts/PracticeModule1/LessonLibrary.sol/UseLibraries";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "multiplyNumbers",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "subtractNumbers",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506101d5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80638f744c321461003b578063d3f3cd7b14610060575b600080fd5b61004e610049366004610126565b610073565b60405190815260200160405180910390f35b61004e61006e366004610126565b610113565b6040517f5d4e1e5c000000000000000000000000000000000000000000000000000000008152600481018390526024810182905260009073__$91b1213c9937351f7ee9f99e8824237f16$__90635d4e1e5c90604401602060405180830381865af41580156100e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061010a9190610148565b90505b92915050565b600061010a8383600061010a8284610161565b6000806040838503121561013957600080fd5b50508035926020909101359150565b60006020828403121561015a57600080fd5b5051919050565b808202811582820484141761010d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220c0a8b3eb005c1ce731b94c6b59cf63b91a72580ca5183f0fcff371d465e560c764736f6c63430008140033";

type UseLibrariesConstructorParams =
  | [linkLibraryAddresses: UseLibrariesLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UseLibrariesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class UseLibraries__factory extends ContractFactory {
  constructor(...args: UseLibrariesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        UseLibraries__factory.linkBytecode(linkLibraryAddresses),
        signer
      );
    }
  }

  static linkBytecode(
    linkLibraryAddresses: UseLibrariesLibraryAddresses
  ): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$91b1213c9937351f7ee9f99e8824237f16\\$__", "g"),
      linkLibraryAddresses[
        "contracts/PracticeModule1/LessonExternalLibrary.sol:LessonExternalLibrary"
      ]
        .replace(/^0x/, "")
        .toLowerCase()
    );

    return linkedBytecode;
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      UseLibraries & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): UseLibraries__factory {
    return super.connect(runner) as UseLibraries__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UseLibrariesInterface {
    return new Interface(_abi) as UseLibrariesInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): UseLibraries {
    return new Contract(address, _abi, runner) as unknown as UseLibraries;
  }
}

export interface UseLibrariesLibraryAddresses {
  ["contracts/PracticeModule1/LessonExternalLibrary.sol:LessonExternalLibrary"]: string;
}
