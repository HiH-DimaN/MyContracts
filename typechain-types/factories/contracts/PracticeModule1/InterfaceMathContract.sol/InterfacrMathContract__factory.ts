/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  InterfacrMathContract,
  InterfacrMathContractInterface,
} from "../../../../contracts/PracticeModule1/InterfaceMathContract.sol/InterfacrMathContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_mathContractAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "addNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "divideNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "multiplyNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "subtractNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161037338038061037383398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6102e0806100936000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630f3d020414610051578063625faf67146100765780639bef0c7014610089578063be2a19711461009c575b600080fd5b61006461005f36600461026f565b6100af565b60405190815260200160405180910390f35b61006461008436600461026f565b610152565b61006461009736600461026f565b6101b1565b6100646100aa36600461026f565b610210565b600080546040517f771602f7000000000000000000000000000000000000000000000000000000008152600481018590526024810184905273ffffffffffffffffffffffffffffffffffffffff9091169063771602f7906044015b602060405180830381865afa158015610127573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061014b9190610291565b9392505050565b600080546040517ff88e9fbf000000000000000000000000000000000000000000000000000000008152600481018590526024810184905273ffffffffffffffffffffffffffffffffffffffff9091169063f88e9fbf9060440161010a565b600080546040517f3ef5e445000000000000000000000000000000000000000000000000000000008152600481018590526024810184905273ffffffffffffffffffffffffffffffffffffffff90911690633ef5e4459060440161010a565b600080546040517f165c4a16000000000000000000000000000000000000000000000000000000008152600481018590526024810184905273ffffffffffffffffffffffffffffffffffffffff9091169063165c4a169060440161010a565b6000806040838503121561028257600080fd5b50508035926020909101359150565b6000602082840312156102a357600080fd5b505191905056fea26469706673582212205b50b7ad4bb6fd56aaef7110f9723975012860393c513036eb9a4f8dfb60c9d364736f6c63430008140033";

type InterfacrMathContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: InterfacrMathContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class InterfacrMathContract__factory extends ContractFactory {
  constructor(...args: InterfacrMathContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _mathContractAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_mathContractAddress, overrides || {});
  }
  override deploy(
    _mathContractAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_mathContractAddress, overrides || {}) as Promise<
      InterfacrMathContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): InterfacrMathContract__factory {
    return super.connect(runner) as InterfacrMathContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): InterfacrMathContractInterface {
    return new Interface(_abi) as InterfacrMathContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): InterfacrMathContract {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as InterfacrMathContract;
  }
}
