/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  InterfacrMathContract,
  InterfacrMathContractInterface,
} from "../../../../contracts/PracticeModule1/InterfaceMathContract.sol/InterfacrMathContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_mathContractAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "addNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "divideNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "multiplyNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "subtractNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f80fd5b50604051610359380380610359833981016040819052602b91604e565b5f80546001600160a01b0319166001600160a01b03929092169190911790556079565b5f60208284031215605d575f80fd5b81516001600160a01b03811681146072575f80fd5b9392505050565b6102d3806100865f395ff3fe608060405234801561000f575f80fd5b506004361061004a575f3560e01c80630f3d02041461004e578063625faf67146100735780639bef0c7014610086578063be2a197114610099575b5f80fd5b61006161005c366004610266565b6100ac565b60405190815260200160405180910390f35b610061610081366004610266565b61014c565b610061610094366004610266565b6101aa565b6100616100a7366004610266565b610208565b5f80546040517f771602f7000000000000000000000000000000000000000000000000000000008152600481018590526024810184905273ffffffffffffffffffffffffffffffffffffffff9091169063771602f7906044015b602060405180830381865afa158015610121573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101459190610286565b9392505050565b5f80546040517ff88e9fbf000000000000000000000000000000000000000000000000000000008152600481018590526024810184905273ffffffffffffffffffffffffffffffffffffffff9091169063f88e9fbf90604401610106565b5f80546040517f3ef5e445000000000000000000000000000000000000000000000000000000008152600481018590526024810184905273ffffffffffffffffffffffffffffffffffffffff90911690633ef5e44590604401610106565b5f80546040517f165c4a16000000000000000000000000000000000000000000000000000000008152600481018590526024810184905273ffffffffffffffffffffffffffffffffffffffff9091169063165c4a1690604401610106565b5f8060408385031215610277575f80fd5b50508035926020909101359150565b5f60208284031215610296575f80fd5b505191905056fea2646970667358221220cd89610bf2b44539a5af788ae2c995ac51be34674f28fdfeaf066b4bbb9a7b4e64736f6c634300081a0033";

type InterfacrMathContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: InterfacrMathContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class InterfacrMathContract__factory extends ContractFactory {
  constructor(...args: InterfacrMathContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _mathContractAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_mathContractAddress, overrides || {});
  }
  override deploy(
    _mathContractAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_mathContractAddress, overrides || {}) as Promise<
      InterfacrMathContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): InterfacrMathContract__factory {
    return super.connect(runner) as InterfacrMathContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): InterfacrMathContractInterface {
    return new Interface(_abi) as InterfacrMathContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): InterfacrMathContract {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as InterfacrMathContract;
  }
}
