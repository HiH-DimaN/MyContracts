/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  Cycles,
  CyclesInterface,
} from "../../../../contracts/PracticeModule1/LessonCycles.sol/Cycles";

const _abi = [
  {
    inputs: [],
    name: "i",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "setNumber",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610134806100206000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80634154b243146037578063e5aa3d5814603f575b600080fd5b603d6059565b005b604760005481565b60405190815260200160405180910390f35b60005b600a81101560825760038114607357600581146082575b80607b8160a0565b915050605c565b5060005b600a811015609d578060968160a0565b9150506086565b50565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820360f7577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea26469706673582212202ef47e09bf70a72b9ece0f36ae59b44580d7663988721858d7c395bf8a32ddac64736f6c63430008140033";

type CyclesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CyclesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Cycles__factory extends ContractFactory {
  constructor(...args: CyclesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Cycles & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Cycles__factory {
    return super.connect(runner) as Cycles__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CyclesInterface {
    return new Interface(_abi) as CyclesInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Cycles {
    return new Contract(address, _abi, runner) as unknown as Cycles;
  }
}
