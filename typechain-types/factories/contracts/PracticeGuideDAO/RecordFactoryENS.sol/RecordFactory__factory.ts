/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  RecordFactory,
  RecordFactoryInterface,
} from "../../../../contracts/PracticeGuideDAO/RecordFactoryENS.sol/RecordFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_record",
        type: "address",
      },
    ],
    name: "addRecord",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_record",
        type: "string",
      },
    ],
    name: "addRecord",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "records",
    outputs: [
      {
        internalType: "contract Record",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610d00806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063344610671461004657806399b5346314610082578063d81aa8c414610097575b600080fd5b6100596100543660046101d4565b6100aa565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6100956100903660046101ed565b6100e1565b005b6100956100a5366004610259565b6101a1565b600081815481106100ba57600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b6000816040516100f0906101ba565b73ffffffffffffffffffffffffffffffffffffffff90911681526020015b604051809103906000f08015801561012a573d6000803e3d6000fd5b50600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff929092169190911790555050565b6000816040516101b0906101c7565b61010e919061030a565b6102c28061035983390190565b6106b08061061b83390190565b6000602082840312156101e657600080fd5b5035919050565b6000602082840312156101ff57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811461022357600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006020828403121561026b57600080fd5b813567ffffffffffffffff8082111561028357600080fd5b818401915084601f83011261029757600080fd5b8135818111156102a9576102a961022a565b604051601f8201601f19908116603f011681019083821181831017156102d1576102d161022a565b816040528281528760208487010111156102ea57600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060208083528351808285015260005b818110156103375785810183015185820160400152820161031b565b506000604082860101526040601f19601f830116850101925050509291505056fe608060405234801561001057600080fd5b506040516102c23803806102c283398101604081905261002f91610058565b42600055600180546001600160a01b0319166001600160a01b0392909216919091179055610088565b60006020828403121561006a57600080fd5b81516001600160a01b038116811461008157600080fd5b9392505050565b61022b806100976000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630781f5c9146100515780631dcd69ec14610099578063266cf109146100b0578063c37787d9146100f5575b600080fd5b604080518082018252600781527f616464726573730000000000000000000000000000000000000000000000000060208201529051610090919061014c565b60405180910390f35b6100a260005481565b604051908152602001610090565b6001546100d09073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610090565b61014a6101033660046101b8565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b005b600060208083528351808285015260005b818110156101795785810183015185820160400152820161015d565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b6000602082840312156101ca57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146101ee57600080fd5b939250505056fea2646970667358221220926f5d4ec5185ca08249b35a132a5a04126a1994b2364dddce3f50828d1fb54564736f6c63430008140033608060405234801561001057600080fd5b506040516106b03803806106b083398101604081905261002f9161005c565b42600055600161003f82826101ae565b505061026d565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561006f57600080fd5b82516001600160401b038082111561008657600080fd5b818501915085601f83011261009a57600080fd5b8151818111156100ac576100ac610046565b604051601f8201601f19908116603f011681019083821181831017156100d4576100d4610046565b8160405282815288868487010111156100ec57600080fd5b600093505b8284101561010e57848401860151818501870152928501926100f1565b600086848301015280965050505050505092915050565b600181811c9082168061013957607f821691505b60208210810361015957634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156101a957600081815260208120601f850160051c810160208610156101865750805b601f850160051c820191505b818110156101a557828155600101610192565b5050505b505050565b81516001600160401b038111156101c7576101c7610046565b6101db816101d58454610125565b8461015f565b602080601f83116001811461021057600084156101f85750858301515b600019600386901b1c1916600185901b1785556101a5565b600085815260208120601f198616915b8281101561023f57888601518255948401946001909101908401610220565b508582101561025d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6104348061027c6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630781f5c9146100515780631dcd69ec1461009c578063266cf109146100b35780633e0a0099146100bb575b600080fd5b60408051808201909152600681527f737472696e67000000000000000000000000000000000000000000000000000060208201525b604051610093919061016e565b60405180910390f35b6100a560005481565b604051908152602001610093565b6100866100d0565b6100ce6100c93660046101eb565b61015e565b005b600180546100dd9061029c565b80601f01602080910402602001604051908101604052809291908181526020018280546101099061029c565b80156101565780601f1061012b57610100808354040283529160200191610156565b820191906000526020600020905b81548152906001019060200180831161013957829003601f168201915b505050505081565b600161016a828261033e565b5050565b600060208083528351808285015260005b8181101561019b5785810183015185820160400152820161017f565b506000604082860101526040601f19601f8301168501019250505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000602082840312156101fd57600080fd5b813567ffffffffffffffff8082111561021557600080fd5b818401915084601f83011261022957600080fd5b81358181111561023b5761023b6101bc565b604051601f8201601f19908116603f01168101908382118183101715610263576102636101bc565b8160405282815287602084870101111561027c57600080fd5b826020860160208301376000928101602001929092525095945050505050565b600181811c908216806102b057607f821691505b6020821081036102e9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f82111561033957600081815260208120601f850160051c810160208610156103165750805b601f850160051c820191505b8181101561033557828155600101610322565b5050505b505050565b815167ffffffffffffffff811115610358576103586101bc565b61036c81610366845461029c565b846102ef565b602080601f8311600181146103a157600084156103895750858301515b600019600386901b1c1916600185901b178555610335565b600085815260208120601f198616915b828110156103d0578886015182559484019460019091019084016103b1565b50858210156103ee5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea264697066735822122041ea4a7d778de48d4512eaf6c7761d1508493bc89644f41cd4f59f896d6c1f9e64736f6c63430008140033a2646970667358221220ecc54f49638ca897a428c89926e8855b9ee9bb5ad61348746464248e0951fd4d64736f6c63430008140033";

type RecordFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RecordFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RecordFactory__factory extends ContractFactory {
  constructor(...args: RecordFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      RecordFactory & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): RecordFactory__factory {
    return super.connect(runner) as RecordFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RecordFactoryInterface {
    return new Interface(_abi) as RecordFactoryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): RecordFactory {
    return new Contract(address, _abi, runner) as unknown as RecordFactory;
  }
}
