/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Voting,
  VotingInterface,
} from "../../../contracts/PracticeGuideDAO/Voting";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_delay",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "REGISTRATION_DURATION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "VOTING_CREATED_AT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "VOTING_DURATION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "VOTING_STARTS_AT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "surname",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "age",
        type: "uint256",
      },
    ],
    name: "addCandidate",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "allCandidates",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "candidates",
    outputs: [
      {
        internalType: "bytes32",
        name: "uid",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "surname",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "age",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "votes",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "registeredCandidate",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_uid",
        type: "bytes32",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "voters",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561000f575f80fd5b50604051610cf7380380610cf783398101604081905261002e91610074565b61003882426100ae565b600481905561004b9062093a80906100ae565b608052600580546001600160a01b0319166001600160a01b0392909216919091179055506100d3565b5f8060408385031215610085575f80fd5b825160208401519092506001600160a01b03811681146100a3575f80fd5b809150509250929050565b808201808211156100cd57634e487b7160e01b5f52601160045260245ffd5b92915050565b608051610bfe6100f95f395f8181610111015281816105fb01526106710152610bfe5ff3fe6080604052600436106100ad575f3560e01c8063a3ec138d11610066578063a69beaba1161004c578063a69beaba146101d6578063fc60c8b3146101f5578063fea6678114610214575f80fd5b8063a3ec138d14610195578063a438d208146101c0575f80fd5b8063461c187711610096578063461c1877146101005780634c1342df146101415780634db1247e14610157575f80fd5b80631a0478d5146100b15780633ca09fdf146100eb575b5f80fd5b3480156100bc575f80fd5b506100d06100cb366004610806565b610229565b6040516100e29695949392919061084b565b60405180910390f35b6100fe6100f936600461094a565b610382565b005b34801561010b575f80fd5b506101337f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016100e2565b34801561014c575f80fd5b5061013362093a8081565b348015610162575f80fd5b506101856101713660046109b8565b60026020525f908152604090205460ff1681565b60405190151581526020016100e2565b3480156101a0575f80fd5b506101336101af3660046109b8565b60036020525f908152604090205481565b3480156101cb575f80fd5b506101336212750081565b3480156101e1575f80fd5b506100fe6101f0366004610806565b6105f8565b348015610200575f80fd5b5061013361020f366004610806565b6107e7565b34801561021f575f80fd5b5061013360045481565b5f602081905290815260409020805460018201805491929161024a906109f2565b80601f0160208091040260200160405190810160405280929190818152602001828054610276906109f2565b80156102c15780601f10610298576101008083540402835291602001916102c1565b820191905f5260205f20905b8154815290600101906020018083116102a457829003601f168201915b5050505050908060020180546102d6906109f2565b80601f0160208091040260200160405190810160405280929190818152602001828054610302906109f2565b801561034d5780601f106103245761010080835404028352916020019161034d565b820191905f5260205f20905b81548152906001019060200180831161033057829003601f168201915b50505050600383015460048401546005909401549293909273ffffffffffffffffffffffffffffffffffffffff909116915086565b346103e8146103d85760405162461bcd60e51b815260206004820152600f60248201527f506c65617365207061792066656521000000000000000000000000000000000060448201526064015b60405180910390fd5b62093a806004546103e99190610a3e565b4211156104385760405162461bcd60e51b815260206004820152601460248201527f546f6f206c61746520746f20726567697374657200000000000000000000000060448201526064016103cf565b335f9081526002602052604090205460ff16156104975760405162461bcd60e51b815260206004820152601a60248201527f596f7527766520616c726561647920726567697374657265642100000000000060448201526064016103cf565b335f81815260026020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555191926104e692879287928792909101610a57565b60408051601f19818403018152828252805160209182012060c084018352808452838201888152848401889052606085018790523360808601525f60a086018190528281529283905292909120835181559151909350600182019061054b9082610af5565b50604082015160028201906105609082610af5565b506060820151600382015560808201516004820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691909117905560a0909101516005909101556001805480820182555f919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60155505050565b427f000000000000000000000000000000000000000000000000000000000000000011156106685760405162461bcd60e51b815260206004820152601660248201527f566f74696e67206973206e6f742073746172746564210000000000000000000060448201526064016103cf565b610695621275007f0000000000000000000000000000000000000000000000000000000000000000610a3e565b4211156106e45760405162461bcd60e51b815260206004820152601960248201527f566f74696e672068617320616c726561647920656e646564210000000000000060448201526064016103cf565b5f8181526020819052604090206004015473ffffffffffffffffffffffffffffffffffffffff166107575760405162461bcd60e51b815260206004820152601860248201527f43616e64696461746520646f65736e277420657869737421000000000000000060448201526064016103cf565b335f90815260036020526040902054156107b35760405162461bcd60e51b815260206004820152601560248201527f596f7527766520616c726561647920766f74656421000000000000000000000060448201526064016103cf565b335f9081526003602090815260408083208490558383529082905281206005018054916107df83610bb0565b919050555050565b600181815481106107f6575f80fd5b5f91825260209091200154905081565b5f60208284031215610816575f80fd5b5035919050565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b86815260c060208201525f61086360c083018861081d565b8281036040840152610875818861081d565b6060840196909652505073ffffffffffffffffffffffffffffffffffffffff92909216608083015260a0909101529392505050565b634e487b7160e01b5f52604160045260245ffd5b5f82601f8301126108cd575f80fd5b813567ffffffffffffffff8111156108e7576108e76108aa565b604051601f19603f601f19601f8501160116810181811067ffffffffffffffff82111715610917576109176108aa565b60405281815283820160200185101561092e575f80fd5b816020850160208301375f918101602001919091529392505050565b5f805f6060848603121561095c575f80fd5b833567ffffffffffffffff811115610972575f80fd5b61097e868287016108be565b935050602084013567ffffffffffffffff81111561099a575f80fd5b6109a6868287016108be565b93969395505050506040919091013590565b5f602082840312156109c8575f80fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146109eb575f80fd5b9392505050565b600181811c90821680610a0657607f821691505b602082108103610a2457634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52601160045260245ffd5b80820180821115610a5157610a51610a2a565b92915050565b608081525f610a69608083018761081d565b8281036020840152610a7b818761081d565b91505083604083015273ffffffffffffffffffffffffffffffffffffffff8316606083015295945050505050565b601f821115610af057805f5260205f20601f840160051c81016020851015610ace5750805b601f840160051c820191505b81811015610aed575f8155600101610ada565b50505b505050565b815167ffffffffffffffff811115610b0f57610b0f6108aa565b610b2381610b1d84546109f2565b84610aa9565b6020601f821160018114610b55575f8315610b3e5750848201515b5f19600385901b1c1916600184901b178455610aed565b5f84815260208120601f198516915b82811015610b845787850151825560209485019460019092019101610b64565b5084821015610ba157868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b5f5f198203610bc157610bc1610a2a565b506001019056fea26469706673582212204a1679266d010849d28f65b23f7170d1e45a703e233fa9355f68efd5611e51a264736f6c634300081a0033";

type VotingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VotingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Voting__factory extends ContractFactory {
  constructor(...args: VotingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _delay: BigNumberish,
    _owner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_delay, _owner, overrides || {});
  }
  override deploy(
    _delay: BigNumberish,
    _owner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_delay, _owner, overrides || {}) as Promise<
      Voting & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Voting__factory {
    return super.connect(runner) as Voting__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VotingInterface {
    return new Interface(_abi) as VotingInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Voting {
    return new Contract(address, _abi, runner) as unknown as Voting;
  }
}
