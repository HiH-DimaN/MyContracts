/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Voting,
  VotingInterface,
} from "../../../contracts/PracticeGuideDAO/Voting";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_delay",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "REGISTRATION_DURATION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "VOTING_CREATED_AT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "VOTING_DURATION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "VOTING_STARTS_AT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "surname",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "age",
        type: "uint256",
      },
    ],
    name: "addCandidate",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "allCandidates",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "candidates",
    outputs: [
      {
        internalType: "bytes32",
        name: "uid",
        type: "bytes32",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "surname",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "age",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "votes",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "registeredCandidate",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_uid",
        type: "bytes32",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "voters",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b50604051610d4d380380610d4d83398101604081905261002f91610075565b61003982426100b2565b600481905561004c9062093a80906100b2565b608052600580546001600160a01b0319166001600160a01b0392909216919091179055506100d9565b6000806040838503121561008857600080fd5b825160208401519092506001600160a01b03811681146100a757600080fd5b809150509250929050565b808201808211156100d357634e487b7160e01b600052601160045260246000fd5b92915050565b608051610c4b6101026000396000818161011801528181610614015261068a0152610c4b6000f3fe6080604052600436106100b15760003560e01c8063a3ec138d11610069578063a69beaba1161004e578063a69beaba146101e3578063fc60c8b314610203578063fea667811461022357600080fd5b8063a3ec138d1461019f578063a438d208146101cc57600080fd5b8063461c18771161009a578063461c1877146101065780634c1342df146101485780634db1247e1461015f57600080fd5b80631a0478d5146100b65780633ca09fdf146100f1575b600080fd5b3480156100c257600080fd5b506100d66100d1366004610824565b610239565b6040516100e896959493929190610883565b60405180910390f35b6101046100ff366004610986565b610397565b005b34801561011257600080fd5b5061013a7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016100e8565b34801561015457600080fd5b5061013a62093a8081565b34801561016b57600080fd5b5061018f61017a3660046109f3565b60026020526000908152604090205460ff1681565b60405190151581526020016100e8565b3480156101ab57600080fd5b5061013a6101ba3660046109f3565b60036020526000908152604090205481565b3480156101d857600080fd5b5061013a6212750081565b3480156101ef57600080fd5b506101046101fe366004610824565b610611565b34801561020f57600080fd5b5061013a61021e366004610824565b610803565b34801561022f57600080fd5b5061013a60045481565b6000602081905290815260409020805460018201805491929161025b90610a30565b80601f016020809104026020016040519081016040528092919081815260200182805461028790610a30565b80156102d45780601f106102a9576101008083540402835291602001916102d4565b820191906000526020600020905b8154815290600101906020018083116102b757829003601f168201915b5050505050908060020180546102e990610a30565b80601f016020809104026020016040519081016040528092919081815260200182805461031590610a30565b80156103625780601f1061033757610100808354040283529160200191610362565b820191906000526020600020905b81548152906001019060200180831161034557829003601f168201915b50505050600383015460048401546005909401549293909273ffffffffffffffffffffffffffffffffffffffff909116915086565b346103e8146103ed5760405162461bcd60e51b815260206004820152600f60248201527f506c65617365207061792066656521000000000000000000000000000000000060448201526064015b60405180910390fd5b62093a806004546103fe9190610a80565b42111561044d5760405162461bcd60e51b815260206004820152601460248201527f546f6f206c61746520746f20726567697374657200000000000000000000000060448201526064016103e4565b3360009081526002602052604090205460ff16156104ad5760405162461bcd60e51b815260206004820152601a60248201527f596f7527766520616c726561647920726567697374657265642100000000000060448201526064016103e4565b33600081815260026020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790555191926104fd92879287928792909101610a99565b60408051601f19818403018152828252805160209182012060c08401835280845283820188815284840188905260608501879052336080860152600060a08601819052828152928390529290912083518155915190935060018201906105639082610b3b565b50604082015160028201906105789082610b3b565b506060820151600382015560808201516004820180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90921691909117905560a0909101516005909101556001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60155505050565b427f000000000000000000000000000000000000000000000000000000000000000011156106815760405162461bcd60e51b815260206004820152601660248201527f566f74696e67206973206e6f742073746172746564210000000000000000000060448201526064016103e4565b6106ae621275007f0000000000000000000000000000000000000000000000000000000000000000610a80565b4211156106fd5760405162461bcd60e51b815260206004820152601960248201527f566f74696e672068617320616c726561647920656e646564210000000000000060448201526064016103e4565b60008181526020819052604090206004015473ffffffffffffffffffffffffffffffffffffffff166107715760405162461bcd60e51b815260206004820152601860248201527f43616e64696461746520646f65736e277420657869737421000000000000000060448201526064016103e4565b33600090815260036020526040902054156107ce5760405162461bcd60e51b815260206004820152601560248201527f596f7527766520616c726561647920766f74656421000000000000000000000060448201526064016103e4565b3360009081526003602090815260408083208490558383529082905281206005018054916107fb83610bfb565b919050555050565b6001818154811061081357600080fd5b600091825260209091200154905081565b60006020828403121561083657600080fd5b5035919050565b6000815180845260005b8181101561086357602081850181015186830182015201610847565b506000602082860101526020601f19601f83011685010191505092915050565b86815260c06020820152600061089c60c083018861083d565b82810360408401526108ae818861083d565b6060840196909652505073ffffffffffffffffffffffffffffffffffffffff92909216608083015260a0909101529392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261090a57600080fd5b813567ffffffffffffffff80821115610925576109256108e3565b604051601f8301601f19908116603f0116810190828211818310171561094d5761094d6108e3565b8160405283815286602085880101111561096657600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561099b57600080fd5b833567ffffffffffffffff808211156109b357600080fd5b6109bf878388016108f9565b945060208601359150808211156109d557600080fd5b506109e2868287016108f9565b925050604084013590509250925092565b600060208284031215610a0557600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610a2957600080fd5b9392505050565b600181811c90821680610a4457607f821691505b602082108103610a6457634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610a9357610a93610a6a565b92915050565b608081526000610aac608083018761083d565b8281036020840152610abe818761083d565b91505083604083015273ffffffffffffffffffffffffffffffffffffffff8316606083015295945050505050565b601f821115610b3657600081815260208120601f850160051c81016020861015610b135750805b601f850160051c820191505b81811015610b3257828155600101610b1f565b5050505b505050565b815167ffffffffffffffff811115610b5557610b556108e3565b610b6981610b638454610a30565b84610aec565b602080601f831160018114610b9e5760008415610b865750858301515b600019600386901b1c1916600185901b178555610b32565b600085815260208120601f198616915b82811015610bcd57888601518255948401946001909101908401610bae565b5085821015610beb5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006000198203610c0e57610c0e610a6a565b506001019056fea2646970667358221220a9b615b0f3b0db80b83ffa18fb454a59c94115df73121e59a948657895b7a48664736f6c63430008140033";

type VotingConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VotingConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Voting__factory extends ContractFactory {
  constructor(...args: VotingConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _delay: BigNumberish,
    _owner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_delay, _owner, overrides || {});
  }
  override deploy(
    _delay: BigNumberish,
    _owner: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_delay, _owner, overrides || {}) as Promise<
      Voting & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Voting__factory {
    return super.connect(runner) as Voting__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VotingInterface {
    return new Interface(_abi) as VotingInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Voting {
    return new Contract(address, _abi, runner) as unknown as Voting;
  }
}
