/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  Second,
  SecondInterface,
} from "../../../../contracts/PracticeGuideDAO/Ð¡ontractsSeveral.sol/Second";

const _abi = [
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50607a80601d6000396000f3fe608060405260043610601d5760003560e01c806312065fe014602557005b36602357005b005b348015603057600080fd5b504760405190815260200160405180910390f3fea2646970667358221220f49e279413cf1735b4d9bdf1e85cb453fc19377b750501a530e90de5b414b1ab64736f6c63430008140033";

type SecondConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SecondConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Second__factory extends ContractFactory {
  constructor(...args: SecondConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Second & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Second__factory {
    return super.connect(runner) as Second__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SecondInterface {
    return new Interface(_abi) as SecondInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Second {
    return new Contract(address, _abi, runner) as unknown as Second;
  }
}
