/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  First,
  FirstInterface,
} from "../../../../contracts/PracticeGuideDAO/Ð¡ontractsSeveral.sol/First";

const _abi = [
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_to",
        type: "address",
      },
    ],
    name: "sendMoney",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f80fd5b5060e08061001b5f395ff3fe608060405260043610601b575f3560e01c8063338ccd7814601f575b5f80fd5b602e602a3660046072565b6030565b005b60405173ffffffffffffffffffffffffffffffffffffffff8216903480156108fc02915f818181858888f19350505050158015606e573d5f803e3d5ffd5b5050565b5f602082840312156081575f80fd5b813573ffffffffffffffffffffffffffffffffffffffff8116811460a3575f80fd5b939250505056fea2646970667358221220b2e5f5c621182af047604b1bf9de963aa6dd97903f2f9c908e5e18d7705902ac64736f6c634300081a0033";

type FirstConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FirstConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class First__factory extends ContractFactory {
  constructor(...args: FirstConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      First & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): First__factory {
    return super.connect(runner) as First__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FirstInterface {
    return new Interface(_abi) as FirstInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): First {
    return new Contract(address, _abi, runner) as unknown as First;
  }
}
