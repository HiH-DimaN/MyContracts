/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Power,
  PowerInterface,
} from "../../../contracts/PracticeMiddle/Power";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "base",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "exponent",
        type: "uint256",
      },
    ],
    name: "pow",
    outputs: [
      {
        internalType: "uint256",
        name: "result",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f80fd5b5061010e8061001c5f395ff3fe6080604052348015600e575f80fd5b50600436106026575f3560e01c80632e4c697f14602a575b5f80fd5b60396035366004607e565b604b565b60405190815260200160405180910390f35b5f815f036059575060016078565b5060015f5b82811015607657606d8483609d565b9150600101605e565b505b92915050565b5f8060408385031215608e575f80fd5b50508035926020909101359150565b80820281158282048414176078577f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffdfea26469706673582212202c964816bbe7db0d17eac67e560a9eb6abb6e67d902cddf389ed4e05a2b9683e64736f6c634300081a0033";

type PowerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PowerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Power__factory extends ContractFactory {
  constructor(...args: PowerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Power & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Power__factory {
    return super.connect(runner) as Power__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PowerInterface {
    return new Interface(_abi) as PowerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Power {
    return new Contract(address, _abi, runner) as unknown as Power;
  }
}
