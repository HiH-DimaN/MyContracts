/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  Receive,
  ReceiveInterface,
} from "../../../../contracts/PracticeMiddle/ReceiveEther.sol/Receive";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "LogReceivedEther",
    type: "event",
  },
  {
    inputs: [],
    name: "contractBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061012c806100206000396000f3fe608060405260043610602a5760003560e01c806312065fe01460815780638b7afe2e1460a357600080fd5b36607c5734600080828254603d919060b7565b9091555050604080513381523460208201527f3317af6e3247959c45cb6051f9153437a9072683e21eda1f9b52c5bcec0e89c2910160405180910390a1005b600080fd5b348015608c57600080fd5b506000545b60405190815260200160405180910390f35b34801560ae57600080fd5b50609160005481565b8082018082111560f0577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9291505056fea26469706673582212203e5a83d446dfe9a1882cbcd4021bc4743ed277c3f2e58ced2a1a9ac4128cd3a164736f6c63430008140033";

type ReceiveConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ReceiveConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Receive__factory extends ContractFactory {
  constructor(...args: ReceiveConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Receive & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Receive__factory {
    return super.connect(runner) as Receive__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReceiveInterface {
    return new Interface(_abi) as ReceiveInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Receive {
    return new Contract(address, _abi, runner) as unknown as Receive;
  }
}
