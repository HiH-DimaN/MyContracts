/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ConditionChecker,
  ConditionCheckerInterface,
} from "../../../contracts/PracticeJunior/ConditionChecker";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "FunctionExecuted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "executeIfPositive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610131806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80636627180514602d575b600080fd5b603c603836600460e3565b603e565b005b6000811160ab576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f56616c7565206d7573742062652067726561746572207468616e207a65726f00604482015260640160405180910390fd5b60405181815233907f5d0ebe2ee823646f37a59fbe26913ca4110b524164b913affe4c3c8862e6f4a39060200160405180910390a250565b60006020828403121560f457600080fd5b503591905056fea26469706673582212205b6352d347e88582564144e375efb32d9780ffa001f1bc8d48c278ad1f574da364736f6c63430008140033";

type ConditionCheckerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConditionCheckerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConditionChecker__factory extends ContractFactory {
  constructor(...args: ConditionCheckerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ConditionChecker & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ConditionChecker__factory {
    return super.connect(runner) as ConditionChecker__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConditionCheckerInterface {
    return new Interface(_abi) as ConditionCheckerInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ConditionChecker {
    return new Contract(address, _abi, runner) as unknown as ConditionChecker;
  }
}
