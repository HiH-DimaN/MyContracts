/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ArraySum,
  ArraySumInterface,
} from "../../../contracts/PracticeJunior/ArraySum";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "number",
        type: "uint256",
      },
    ],
    name: "addNumber",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getSum",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "numbers",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610226806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063569c5f6d14610046578063d39fa23314610060578063fce6802314610073575b600080fd5b61004e6100b5565b60405190815260200160405180910390f35b61004e61006e366004610128565b610107565b6100b3610081366004610128565b600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630155565b005b600080805b60005481101561010157600081815481106100d7576100d7610141565b9060005260206000200154826100ed919061019f565b9150806100f9816101b8565b9150506100ba565b50919050565b6000818154811061011757600080fd5b600091825260209091200154905081565b60006020828403121561013a57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156101b2576101b2610170565b92915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036101e9576101e9610170565b506001019056fea26469706673582212206a86c41d52bf3af2b4592ef481e1c556def2f6e298779a76cd8127dc09deb35864736f6c63430008140033";

type ArraySumConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ArraySumConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ArraySum__factory extends ContractFactory {
  constructor(...args: ArraySumConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ArraySum & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ArraySum__factory {
    return super.connect(runner) as ArraySum__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ArraySumInterface {
    return new Interface(_abi) as ArraySumInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ArraySum {
    return new Contract(address, _abi, runner) as unknown as ArraySum;
  }
}
