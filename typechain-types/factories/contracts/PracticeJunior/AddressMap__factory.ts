/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  AddressMap,
  AddressMapInterface,
} from "../../../contracts/PracticeJunior/AddressMap";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    name: "setBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610192806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806327e235e314610046578063e30443bc14610078578063f8b2cb4f146100b1575b600080fd5b610066610054366004610110565b60006020819052908152604090205481565b60405190815260200160405180910390f35b6100af610086366004610132565b73ffffffffffffffffffffffffffffffffffffffff909116600090815260208190526040902055565b005b6100666100bf366004610110565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b803573ffffffffffffffffffffffffffffffffffffffff8116811461010b57600080fd5b919050565b60006020828403121561012257600080fd5b61012b826100e7565b9392505050565b6000806040838503121561014557600080fd5b61014e836100e7565b94602093909301359350505056fea264697066735822122093d2b19ac955a03323a5ee3d4902fad14597e91ea40d9475531978f39602412d64736f6c63430008140033";

type AddressMapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AddressMapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AddressMap__factory extends ContractFactory {
  constructor(...args: AddressMapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      AddressMap & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): AddressMap__factory {
    return super.connect(runner) as AddressMap__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AddressMapInterface {
    return new Interface(_abi) as AddressMapInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): AddressMap {
    return new Contract(address, _abi, runner) as unknown as AddressMap;
  }
}
