/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  AddressMap,
  AddressMapInterface,
} from "../../../contracts/PracticeJunior/AddressMap";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "balances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    name: "setBalance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f80fd5b506101878061001c5f395ff3fe608060405234801561000f575f80fd5b506004361061003f575f3560e01c806327e235e314610043578063e30443bc14610074578063f8b2cb4f146100ac575b5f80fd5b610062610051366004610109565b5f6020819052908152604090205481565b60405190815260200160405180910390f35b6100aa610082366004610129565b73ffffffffffffffffffffffffffffffffffffffff9091165f90815260208190526040902055565b005b6100626100ba366004610109565b73ffffffffffffffffffffffffffffffffffffffff165f9081526020819052604090205490565b803573ffffffffffffffffffffffffffffffffffffffff81168114610104575f80fd5b919050565b5f60208284031215610119575f80fd5b610122826100e1565b9392505050565b5f806040838503121561013a575f80fd5b610143836100e1565b94602093909301359350505056fea2646970667358221220486903edf10cbc22b67951f4cc0c29ca734e25e0c090bd099dbec053eee9063764736f6c634300081a0033";

type AddressMapConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AddressMapConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AddressMap__factory extends ContractFactory {
  constructor(...args: AddressMapConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      AddressMap & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): AddressMap__factory {
    return super.connect(runner) as AddressMap__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AddressMapInterface {
    return new Interface(_abi) as AddressMapInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): AddressMap {
    return new Contract(address, _abi, runner) as unknown as AddressMap;
  }
}
