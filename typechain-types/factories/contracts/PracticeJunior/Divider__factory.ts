/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Divider,
  DividerInterface,
} from "../../../contracts/PracticeJunior/Divider";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "y",
        type: "uint256",
      },
    ],
    name: "divide",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610168806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063f88e9fbf14610030575b600080fd5b61004361003e3660046100d5565b610055565b60405190815260200160405180910390f35b60008082116100c4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f4469766973696f6e206279207a65726f00000000000000000000000000000000604482015260640160405180910390fd5b6100ce82846100f7565b9392505050565b600080604083850312156100e857600080fd5b50508035926020909101359150565b60008261012d577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea2646970667358221220bca597771f4969cf84840f3ee7c686094c35627d2f95982dfb405f5e81e3f97764736f6c63430008140033";

type DividerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DividerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Divider__factory extends ContractFactory {
  constructor(...args: DividerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Divider & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Divider__factory {
    return super.connect(runner) as Divider__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DividerInterface {
    return new Interface(_abi) as DividerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Divider {
    return new Contract(address, _abi, runner) as unknown as Divider;
  }
}
