/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  ArraySum,
  ArraySumInterface,
} from "../../../contracts/practice-junior/ArraySum";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "number",
        type: "uint256",
      },
    ],
    name: "addNumber",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getSum",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "numbers",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f80fd5b506101ca8061001c5f395ff3fe608060405234801561000f575f80fd5b506004361061003f575f3560e01c8063569c5f6d14610043578063d39fa2331461005d578063fce6802314610070575b5f80fd5b61004b6100b1565b60405190815260200160405180910390f35b61004b61006b366004610112565b6100f4565b6100af61007e366004610112565b5f80546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630155565b005b5f80805b5f548110156100ee575f81815481106100d0576100d0610129565b905f5260205f200154826100e49190610156565b91506001016100b5565b50919050565b5f8181548110610102575f80fd5b5f91825260209091200154905081565b5f60208284031215610122575f80fd5b5035919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b8082018082111561018e577f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b9291505056fea26469706673582212208e8fd49667daf1b430b77e82087a4245ba822253481e7399c513cb62730583b664736f6c634300081a0033";

type ArraySumConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ArraySumConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ArraySum__factory extends ContractFactory {
  constructor(...args: ArraySumConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ArraySum & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ArraySum__factory {
    return super.connect(runner) as ArraySum__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ArraySumInterface {
    return new Interface(_abi) as ArraySumInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ArraySum {
    return new Contract(address, _abi, runner) as unknown as ArraySum;
  }
}
