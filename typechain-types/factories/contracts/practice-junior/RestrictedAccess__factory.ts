/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  RestrictedAccess,
  RestrictedAccessInterface,
} from "../../../contracts/practice-junior/RestrictedAccess";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_allowedAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "allowedAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "restrictedFucnion",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f80fd5b506040516101cc3803806101cc833981016040819052602b91604e565b5f80546001600160a01b0319166001600160a01b03929092169190911790556079565b5f60208284031215605d575f80fd5b81516001600160a01b03811681146072575f80fd5b9392505050565b610146806100865f395ff3fe608060405234801561000f575f80fd5b5060043610610034575f3560e01c80634cf7817014610038578063adcd064514610080575b5f80fd5b5f546100579073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b61008861008a565b005b5f5473ffffffffffffffffffffffffffffffffffffffff16331461010e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f4163636573732064656e69656400000000000000000000000000000000000000604482015260640160405180910390fd5b56fea264697066735822122065ef2d80de566c151aa230d0c67084748c61ad6cfe18e942c442a665d052a3c464736f6c634300081a0033";

type RestrictedAccessConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RestrictedAccessConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RestrictedAccess__factory extends ContractFactory {
  constructor(...args: RestrictedAccessConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _allowedAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_allowedAddress, overrides || {});
  }
  override deploy(
    _allowedAddress: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_allowedAddress, overrides || {}) as Promise<
      RestrictedAccess & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): RestrictedAccess__factory {
    return super.connect(runner) as RestrictedAccess__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RestrictedAccessInterface {
    return new Interface(_abi) as RestrictedAccessInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): RestrictedAccess {
    return new Contract(address, _abi, runner) as unknown as RestrictedAccess;
  }
}
