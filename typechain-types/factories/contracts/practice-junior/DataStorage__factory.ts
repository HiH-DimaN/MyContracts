/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  DataStorage,
  DataStorageInterface,
} from "../../../contracts/practice-junior/DataStorage";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "oldData",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "newData",
        type: "string",
      },
    ],
    name: "DataUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "data",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getData",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "newData",
        type: "string",
      },
    ],
    name: "setData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f80fd5b506105528061001c5f395ff3fe608060405234801561000f575f80fd5b506004361061003f575f3560e01c80633bc5de301461004357806347064d6a1461006157806373d4a13a14610076575b5f80fd5b61004b61007e565b604051610058919061029d565b60405180910390f35b61007461006f3660046102e3565b61010d565b005b61004b6101e4565b60605f805461008c90610397565b80601f01602080910402602001604051908101604052809291908181526020018280546100b890610397565b80156101035780601f106100da57610100808354040283529160200191610103565b820191905f5260205f20905b8154815290600101906020018083116100e657829003601f168201915b5050505050905090565b5f80805461011a90610397565b80601f016020809104026020016040519081016040528092919081815260200182805461014690610397565b80156101915780601f1061016857610100808354040283529160200191610191565b820191905f5260205f20905b81548152906001019060200180831161017457829003601f168201915b50505050509050815f90816101a69190610434565b507fee986145c636aca5c6c0b4ce0e9d371e77ab30b3e28fe5c3a8d977f05fc8cf2481836040516101d89291906104ef565b60405180910390a15050565b5f80546101f090610397565b80601f016020809104026020016040519081016040528092919081815260200182805461021c90610397565b80156102675780601f1061023e57610100808354040283529160200191610267565b820191905f5260205f20905b81548152906001019060200180831161024a57829003601f168201915b505050505081565b5f81518084528060208401602086015e5f602082860101526020601f19601f83011685010191505092915050565b602081525f6102af602083018461026f565b9392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b5f602082840312156102f3575f80fd5b813567ffffffffffffffff811115610309575f80fd5b8201601f81018413610319575f80fd5b803567ffffffffffffffff811115610333576103336102b6565b604051601f19603f601f19601f8501160116810181811067ffffffffffffffff82111715610363576103636102b6565b60405281815282820160200186101561037a575f80fd5b816020840160208301375f91810160200191909152949350505050565b600181811c908216806103ab57607f821691505b6020821081036103e2577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b50919050565b601f82111561042f57805f5260205f20601f840160051c8101602085101561040d5750805b601f840160051c820191505b8181101561042c575f8155600101610419565b50505b505050565b815167ffffffffffffffff81111561044e5761044e6102b6565b6104628161045c8454610397565b846103e8565b6020601f821160018114610494575f831561047d5750848201515b5f19600385901b1c1916600184901b17845561042c565b5f84815260208120601f198516915b828110156104c357878501518255602094850194600190920191016104a3565b50848210156104e057868401515f19600387901b60f8161c191681555b50505050600190811b01905550565b604081525f610501604083018561026f565b8281036020840152610513818561026f565b9594505050505056fea2646970667358221220aaa6b9db961c6d5af2eff75a3f216c2d313acf6fb55c2c5f4062a7ea7bfdb0e564736f6c634300081a0033";

type DataStorageConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DataStorageConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DataStorage__factory extends ContractFactory {
  constructor(...args: DataStorageConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      DataStorage & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): DataStorage__factory {
    return super.connect(runner) as DataStorage__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DataStorageInterface {
    return new Interface(_abi) as DataStorageInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): DataStorage {
    return new Contract(address, _abi, runner) as unknown as DataStorage;
  }
}
