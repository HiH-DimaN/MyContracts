/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  Facrtorial,
  FacrtorialInterface,
} from "../../../../contracts/practice-middle/Factorial.sol/Facrtorial";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "n",
        type: "uint256",
      },
    ],
    name: "factorial",
    outputs: [
      {
        internalType: "uint256",
        name: "result",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f80fd5b5061010a8061001c5f395ff3fe6080604052348015600e575f80fd5b50600436106026575f3560e01c80638371483414602a575b5f80fd5b60396035366004607d565b604b565b60405190815260200160405180910390f35b5f815f03605a57506001919050565b506001805b82811015607757606e81836093565b9150600101605f565b50919050565b5f60208284031215608c575f80fd5b5035919050565b808202811582820484141760ce577f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b9291505056fea26469706673582212200b0b0ff0a9cb6feee9fc1fddc58d95cd2503326fa3bf2eb69de0194bdecee57264736f6c634300081a0033";

type FacrtorialConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FacrtorialConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Facrtorial__factory extends ContractFactory {
  constructor(...args: FacrtorialConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Facrtorial & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Facrtorial__factory {
    return super.connect(runner) as Facrtorial__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FacrtorialInterface {
    return new Interface(_abi) as FacrtorialInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Facrtorial {
    return new Contract(address, _abi, runner) as unknown as Facrtorial;
  }
}
