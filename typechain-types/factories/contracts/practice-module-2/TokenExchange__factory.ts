/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  TokenExchange,
  TokenExchangeInterface,
} from "../../../contracts/practice-module-2/TokenExchange";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenB",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "AddressEmptyCode",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "AddressInsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "FailedInnerCall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "SafeERC20FailedOperation",
    type: "error",
  },
  {
    inputs: [],
    name: "buyTokenA",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "exchangeRate",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "swapAToB",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "swapBToA",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenA",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenB",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f80fd5b50604051610827380380610827833981016040819052602b916079565b5f80546001600160a01b039384166001600160a01b03199182161790915560018054929093169116179055606460025560a5565b80516001600160a01b03811681146074575f80fd5b919050565b5f80604083850312156089575f80fd5b609083605f565b9150609c60208401605f565b90509250929050565b610775806100b25f395ff3fe608060405260043610610063575f3560e01c80635f64b55b116100415780635f64b55b146100e65780637e446a8614610105578063859497881461010d575f80fd5b80630fc63d101461006757806338720f72146100a25780633ba0b9a9146100c3575b5f80fd5b348015610072575f80fd5b505f54610085906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100ad575f80fd5b506100c16100bc366004610668565b61012c565b005b3480156100ce575f80fd5b506100d860025481565b604051908152602001610099565b3480156100f1575f80fd5b50600154610085906001600160a01b031681565b6100c161025f565b348015610118575f80fd5b506100c1610127366004610668565b61028a565b5f546040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa15801561018a573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101ae919061067f565b101561021b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4e6f7420656e6f75676820546f6b656e2041000000000000000000000000000060448201526064015b60405180910390fd5b5f6002548261022a9190610696565b5f54909150610244906001600160a01b03163330856103b5565b60015461025b906001600160a01b03163383610437565b5050565b5f6002543461026e9190610696565b5f54909150610287906001600160a01b03163383610437565b50565b6001546040517f70a0823100000000000000000000000000000000000000000000000000000000815233600482015282916001600160a01b0316906370a0823190602401602060405180830381865afa1580156102e9573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061030d919061067f565b1015610375576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4e6f7420656e6f75676820546f6b656e204200000000000000000000000000006044820152606401610212565b5f6002548261038491906106d2565b60015490915061039f906001600160a01b03163330856103b5565b5f5461025b906001600160a01b03163383610437565b6040516001600160a01b0384811660248301528381166044830152606482018390526104319186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061046d565b50505050565b6040516001600160a01b0383811660248301526044820183905261046891859182169063a9059cbb906064016103ea565b505050565b5f6104816001600160a01b038416836104e7565b905080515f141580156104a55750808060200190518101906104a3919061070a565b155b15610468576040517f5274afe70000000000000000000000000000000000000000000000000000000081526001600160a01b0384166004820152602401610212565b60606104f483835f6104fd565b90505b92915050565b60608147101561053b576040517fcd786059000000000000000000000000000000000000000000000000000000008152306004820152602401610212565b5f80856001600160a01b031684866040516105569190610729565b5f6040518083038185875af1925050503d805f8114610590576040519150601f19603f3d011682016040523d82523d5f602084013e610595565b606091505b50915091506105a58683836105b1565b925050505b9392505050565b6060826105c6576105c182610626565b6105aa565b81511580156105dd57506001600160a01b0384163b155b1561061f576040517f9996b3150000000000000000000000000000000000000000000000000000000081526001600160a01b0385166004820152602401610212565b50806105aa565b8051156106365780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f60208284031215610678575f80fd5b5035919050565b5f6020828403121561068f575f80fd5b5051919050565b80820281158282048414176104f7577f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f82610705577f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b500490565b5f6020828403121561071a575f80fd5b815180151581146105aa575f80fd5b5f82518060208501845e5f92019182525091905056fea264697066735822122057ed93c4f3234e02fb7605352ed6edc2fe15e5990874b0340cb7fb1a988e873864736f6c634300081a0033";

type TokenExchangeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenExchangeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenExchange__factory extends ContractFactory {
  constructor(...args: TokenExchangeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _tokenA: AddressLike,
    _tokenB: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_tokenA, _tokenB, overrides || {});
  }
  override deploy(
    _tokenA: AddressLike,
    _tokenB: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_tokenA, _tokenB, overrides || {}) as Promise<
      TokenExchange & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TokenExchange__factory {
    return super.connect(runner) as TokenExchange__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenExchangeInterface {
    return new Interface(_abi) as TokenExchangeInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): TokenExchange {
    return new Contract(address, _abi, runner) as unknown as TokenExchange;
  }
}
