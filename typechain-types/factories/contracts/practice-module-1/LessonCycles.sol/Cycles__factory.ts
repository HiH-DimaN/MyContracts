/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  Cycles,
  CyclesInterface,
} from "../../../../contracts/practice-module-1/LessonCycles.sol/Cycles";

const _abi = [
  {
    inputs: [],
    name: "i",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "setNumber",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052348015600e575f80fd5b506101238061001c5f395ff3fe6080604052348015600e575f80fd5b50600436106030575f3560e01c80634154b243146034578063e5aa3d5814603c575b5f80fd5b603a6055565b005b60435f5481565b60405190815260200160405180910390f35b5f5b600a81101560755760038114606e57600581146075575b6001016057565b505f5b600a811015608f57806088816092565b9150506078565b50565b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820360e6577f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b506001019056fea2646970667358221220cbb98c41ea11abec19d95940853912a271feb4e404c175d5d28d1c7a0242738b64736f6c634300081a0033";

type CyclesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CyclesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Cycles__factory extends ContractFactory {
  constructor(...args: CyclesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Cycles & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Cycles__factory {
    return super.connect(runner) as Cycles__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CyclesInterface {
    return new Interface(_abi) as CyclesInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Cycles {
    return new Contract(address, _abi, runner) as unknown as Cycles;
  }
}
