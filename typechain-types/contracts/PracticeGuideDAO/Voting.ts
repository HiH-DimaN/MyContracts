/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface VotingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "REGISTRATION_DURATION"
      | "VOTING_CREATED_AT"
      | "VOTING_DURATION"
      | "VOTING_STARTS_AT"
      | "addCandidate"
      | "allCandidates"
      | "candidates"
      | "registeredCandidate"
      | "vote"
      | "voters"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "REGISTRATION_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTING_CREATED_AT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTING_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTING_STARTS_AT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addCandidate",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allCandidates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "candidates",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registeredCandidate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "vote", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "voters", values: [AddressLike]): string;

  decodeFunctionResult(
    functionFragment: "REGISTRATION_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTING_CREATED_AT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTING_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VOTING_STARTS_AT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registeredCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "voters", data: BytesLike): Result;
}

export interface Voting extends BaseContract {
  connect(runner?: ContractRunner | null): Voting;
  waitForDeployment(): Promise<this>;

  interface: VotingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  REGISTRATION_DURATION: TypedContractMethod<[], [bigint], "view">;

  VOTING_CREATED_AT: TypedContractMethod<[], [bigint], "view">;

  VOTING_DURATION: TypedContractMethod<[], [bigint], "view">;

  VOTING_STARTS_AT: TypedContractMethod<[], [bigint], "view">;

  addCandidate: TypedContractMethod<
    [name: string, surname: string, age: BigNumberish],
    [void],
    "payable"
  >;

  allCandidates: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  candidates: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, bigint, string, bigint] & {
        uid: string;
        name: string;
        surname: string;
        age: bigint;
        from: string;
        votes: bigint;
      }
    ],
    "view"
  >;

  registeredCandidate: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  vote: TypedContractMethod<[_uid: BytesLike], [void], "nonpayable">;

  voters: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "REGISTRATION_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VOTING_CREATED_AT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VOTING_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VOTING_STARTS_AT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addCandidate"
  ): TypedContractMethod<
    [name: string, surname: string, age: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "allCandidates"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "candidates"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, bigint, string, bigint] & {
        uid: string;
        name: string;
        surname: string;
        age: bigint;
        from: string;
        votes: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registeredCandidate"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<[_uid: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "voters"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;

  filters: {};
}
