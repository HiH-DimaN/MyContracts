/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface RecordFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createAddressRecord"
      | "createStringRecord"
      | "getRecordAtIndex"
      | "getRecordsCount"
      | "records"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "RecordAdded"): EventFragment;

  encodeFunctionData(
    functionFragment: "createAddressRecord",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createStringRecord",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecordAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecordsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "records",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createAddressRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createStringRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecordAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecordsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "records", data: BytesLike): Result;
}

export namespace RecordAddedEvent {
  export type InputTuple = [
    timeOfCreation: BigNumberish,
    recordAddress: AddressLike,
    recordType: string
  ];
  export type OutputTuple = [
    timeOfCreation: bigint,
    recordAddress: string,
    recordType: string
  ];
  export interface OutputObject {
    timeOfCreation: bigint;
    recordAddress: string;
    recordType: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface RecordFactory extends BaseContract {
  connect(runner?: ContractRunner | null): RecordFactory;
  waitForDeployment(): Promise<this>;

  interface: RecordFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createAddressRecord: TypedContractMethod<
    [record: AddressLike],
    [void],
    "nonpayable"
  >;

  createStringRecord: TypedContractMethod<
    [record: string],
    [void],
    "nonpayable"
  >;

  getRecordAtIndex: TypedContractMethod<
    [index: BigNumberish],
    [
      [bigint, string, string] & {
        timeOfCreation: bigint;
        recordAddress: string;
        recordType: string;
      }
    ],
    "view"
  >;

  getRecordsCount: TypedContractMethod<[], [bigint], "view">;

  records: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string] & {
        timeOfCreation: bigint;
        recordAddress: string;
        recordType: string;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createAddressRecord"
  ): TypedContractMethod<[record: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createStringRecord"
  ): TypedContractMethod<[record: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getRecordAtIndex"
  ): TypedContractMethod<
    [index: BigNumberish],
    [
      [bigint, string, string] & {
        timeOfCreation: bigint;
        recordAddress: string;
        recordType: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRecordsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "records"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string] & {
        timeOfCreation: bigint;
        recordAddress: string;
        recordType: string;
      }
    ],
    "view"
  >;

  getEvent(
    key: "RecordAdded"
  ): TypedContractEvent<
    RecordAddedEvent.InputTuple,
    RecordAddedEvent.OutputTuple,
    RecordAddedEvent.OutputObject
  >;

  filters: {
    "RecordAdded(uint256,address,string)": TypedContractEvent<
      RecordAddedEvent.InputTuple,
      RecordAddedEvent.OutputTuple,
      RecordAddedEvent.OutputObject
    >;
    RecordAdded: TypedContractEvent<
      RecordAddedEvent.InputTuple,
      RecordAddedEvent.OutputTuple,
      RecordAddedEvent.OutputObject
    >;
  };
}
