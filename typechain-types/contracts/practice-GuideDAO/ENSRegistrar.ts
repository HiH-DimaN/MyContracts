/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ENSRegistrarInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_REGISTRATION_YEARS"
      | "MIN_REGISTRATION_YEARS"
      | "domains"
      | "ensAddress"
      | "getDomainOwner"
      | "owner"
      | "registerDomain"
      | "registrationPricePerYear"
      | "renewDomain"
      | "renewalCoefficient"
      | "setRegistrationPricePerYear"
      | "setRenewalCoefficient"
      | "withdraw"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "DomainRegistred"): EventFragment;

  encodeFunctionData(
    functionFragment: "MAX_REGISTRATION_YEARS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_REGISTRATION_YEARS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "domains", values: [string]): string;
  encodeFunctionData(
    functionFragment: "ensAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainOwner",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerDomain",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registrationPricePerYear",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renewDomain",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renewalCoefficient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRegistrationPricePerYear",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRenewalCoefficient",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "MAX_REGISTRATION_YEARS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_REGISTRATION_YEARS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "domains", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ensAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDomainOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registrationPricePerYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renewDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renewalCoefficient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegistrationPricePerYear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRenewalCoefficient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace DomainRegistredEvent {
  export type InputTuple = [
    domain: string,
    owner: AddressLike,
    priceReg: BigNumberish,
    timestamp: BigNumberish,
    registrationYears: BigNumberish
  ];
  export type OutputTuple = [
    domain: string,
    owner: string,
    priceReg: bigint,
    timestamp: bigint,
    registrationYears: bigint
  ];
  export interface OutputObject {
    domain: string;
    owner: string;
    priceReg: bigint;
    timestamp: bigint;
    registrationYears: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ENSRegistrar extends BaseContract {
  connect(runner?: ContractRunner | null): ENSRegistrar;
  waitForDeployment(): Promise<this>;

  interface: ENSRegistrarInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_REGISTRATION_YEARS: TypedContractMethod<[], [bigint], "view">;

  MIN_REGISTRATION_YEARS: TypedContractMethod<[], [bigint], "view">;

  domains: TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, bigint, bigint] & {
        owner: string;
        priceReg: bigint;
        timestamp: bigint;
        registrationYears: bigint;
      }
    ],
    "view"
  >;

  ensAddress: TypedContractMethod<[], [string], "view">;

  getDomainOwner: TypedContractMethod<[domain: string], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  registerDomain: TypedContractMethod<
    [domain: string, registrationYears: BigNumberish],
    [void],
    "payable"
  >;

  registrationPricePerYear: TypedContractMethod<[], [bigint], "view">;

  renewDomain: TypedContractMethod<
    [domain: string, renewalYears: BigNumberish],
    [void],
    "payable"
  >;

  renewalCoefficient: TypedContractMethod<[], [bigint], "view">;

  setRegistrationPricePerYear: TypedContractMethod<
    [_registrationPricePerYear: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRenewalCoefficient: TypedContractMethod<
    [_renewalCoefficient: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_REGISTRATION_YEARS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_REGISTRATION_YEARS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "domains"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, bigint, bigint] & {
        owner: string;
        priceReg: bigint;
        timestamp: bigint;
        registrationYears: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "ensAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getDomainOwner"
  ): TypedContractMethod<[domain: string], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerDomain"
  ): TypedContractMethod<
    [domain: string, registrationYears: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "registrationPricePerYear"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renewDomain"
  ): TypedContractMethod<
    [domain: string, renewalYears: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "renewalCoefficient"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setRegistrationPricePerYear"
  ): TypedContractMethod<
    [_registrationPricePerYear: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRenewalCoefficient"
  ): TypedContractMethod<
    [_renewalCoefficient: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "DomainRegistred"
  ): TypedContractEvent<
    DomainRegistredEvent.InputTuple,
    DomainRegistredEvent.OutputTuple,
    DomainRegistredEvent.OutputObject
  >;

  filters: {
    "DomainRegistred(string,address,uint256,uint256,uint256)": TypedContractEvent<
      DomainRegistredEvent.InputTuple,
      DomainRegistredEvent.OutputTuple,
      DomainRegistredEvent.OutputObject
    >;
    DomainRegistred: TypedContractEvent<
      DomainRegistredEvent.InputTuple,
      DomainRegistredEvent.OutputTuple,
      DomainRegistredEvent.OutputObject
    >;
  };
}
