/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface WalletInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addMember"
      | "getBalance"
      | "makeAdmin"
      | "members"
      | "owner"
      | "renounceOwnership"
      | "revokeAdmin"
      | "sendToContract"
      | "setLimit"
      | "transferOwnership"
      | "withdrawMoney"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminAdded"
      | "AdminRevoked"
      | "LimitChanged"
      | "MoneyReceived"
      | "MoneyWithdrawn"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addMember",
    values: [AddressLike, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "makeAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "members",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sendToContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setLimit",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawMoney",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addMember", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makeAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "members", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendToContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLimit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawMoney",
    data: BytesLike
  ): Result;
}

export namespace AdminAddedEvent {
  export type InputTuple = [member: AddressLike];
  export type OutputTuple = [member: string];
  export interface OutputObject {
    member: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AdminRevokedEvent {
  export type InputTuple = [member: AddressLike];
  export type OutputTuple = [member: string];
  export interface OutputObject {
    member: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LimitChangedEvent {
  export type InputTuple = [
    member: AddressLike,
    oldLimit: BigNumberish,
    newLimit: BigNumberish
  ];
  export type OutputTuple = [
    member: string,
    oldLimit: bigint,
    newLimit: bigint
  ];
  export interface OutputObject {
    member: string;
    oldLimit: bigint;
    newLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MoneyReceivedEvent {
  export type InputTuple = [_from: AddressLike, _amount: BigNumberish];
  export type OutputTuple = [_from: string, _amount: bigint];
  export interface OutputObject {
    _from: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MoneyWithdrawnEvent {
  export type InputTuple = [_to: AddressLike, _amount: BigNumberish];
  export type OutputTuple = [_to: string, _amount: bigint];
  export interface OutputObject {
    _to: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Wallet extends BaseContract {
  connect(runner?: ContractRunner | null): Wallet;
  waitForDeployment(): Promise<this>;

  interface: WalletInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addMember: TypedContractMethod<
    [
      memberAddress: AddressLike,
      name: string,
      limit: BigNumberish,
      isAdmin: boolean
    ],
    [void],
    "nonpayable"
  >;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  makeAdmin: TypedContractMethod<
    [memberAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  members: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, boolean] & {
        name: string;
        limit: bigint;
        is_admin: boolean;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "view">;

  revokeAdmin: TypedContractMethod<
    [memberAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  sendToContract: TypedContractMethod<[_to: AddressLike], [void], "payable">;

  setLimit: TypedContractMethod<
    [memberAddress: AddressLike, limit: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  withdrawMoney: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addMember"
  ): TypedContractMethod<
    [
      memberAddress: AddressLike,
      name: string,
      limit: BigNumberish,
      isAdmin: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "makeAdmin"
  ): TypedContractMethod<[memberAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "members"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, boolean] & {
        name: string;
        limit: bigint;
        is_admin: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "view">;
  getFunction(
    nameOrSignature: "revokeAdmin"
  ): TypedContractMethod<[memberAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sendToContract"
  ): TypedContractMethod<[_to: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "setLimit"
  ): TypedContractMethod<
    [memberAddress: AddressLike, limit: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawMoney"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "AdminAdded"
  ): TypedContractEvent<
    AdminAddedEvent.InputTuple,
    AdminAddedEvent.OutputTuple,
    AdminAddedEvent.OutputObject
  >;
  getEvent(
    key: "AdminRevoked"
  ): TypedContractEvent<
    AdminRevokedEvent.InputTuple,
    AdminRevokedEvent.OutputTuple,
    AdminRevokedEvent.OutputObject
  >;
  getEvent(
    key: "LimitChanged"
  ): TypedContractEvent<
    LimitChangedEvent.InputTuple,
    LimitChangedEvent.OutputTuple,
    LimitChangedEvent.OutputObject
  >;
  getEvent(
    key: "MoneyReceived"
  ): TypedContractEvent<
    MoneyReceivedEvent.InputTuple,
    MoneyReceivedEvent.OutputTuple,
    MoneyReceivedEvent.OutputObject
  >;
  getEvent(
    key: "MoneyWithdrawn"
  ): TypedContractEvent<
    MoneyWithdrawnEvent.InputTuple,
    MoneyWithdrawnEvent.OutputTuple,
    MoneyWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "AdminAdded(address)": TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;
    AdminAdded: TypedContractEvent<
      AdminAddedEvent.InputTuple,
      AdminAddedEvent.OutputTuple,
      AdminAddedEvent.OutputObject
    >;

    "AdminRevoked(address)": TypedContractEvent<
      AdminRevokedEvent.InputTuple,
      AdminRevokedEvent.OutputTuple,
      AdminRevokedEvent.OutputObject
    >;
    AdminRevoked: TypedContractEvent<
      AdminRevokedEvent.InputTuple,
      AdminRevokedEvent.OutputTuple,
      AdminRevokedEvent.OutputObject
    >;

    "LimitChanged(address,uint256,uint256)": TypedContractEvent<
      LimitChangedEvent.InputTuple,
      LimitChangedEvent.OutputTuple,
      LimitChangedEvent.OutputObject
    >;
    LimitChanged: TypedContractEvent<
      LimitChangedEvent.InputTuple,
      LimitChangedEvent.OutputTuple,
      LimitChangedEvent.OutputObject
    >;

    "MoneyReceived(address,uint256)": TypedContractEvent<
      MoneyReceivedEvent.InputTuple,
      MoneyReceivedEvent.OutputTuple,
      MoneyReceivedEvent.OutputObject
    >;
    MoneyReceived: TypedContractEvent<
      MoneyReceivedEvent.InputTuple,
      MoneyReceivedEvent.OutputTuple,
      MoneyReceivedEvent.OutputObject
    >;

    "MoneyWithdrawn(address,uint256)": TypedContractEvent<
      MoneyWithdrawnEvent.InputTuple,
      MoneyWithdrawnEvent.OutputTuple,
      MoneyWithdrawnEvent.OutputObject
    >;
    MoneyWithdrawn: TypedContractEvent<
      MoneyWithdrawnEvent.InputTuple,
      MoneyWithdrawnEvent.OutputTuple,
      MoneyWithdrawnEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
