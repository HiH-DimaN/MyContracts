/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface DataTypesInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cast"
      | "dec"
      | "firstBool"
      | "get"
      | "getBoolFour"
      | "getBoolOne"
      | "getBoolThree"
      | "getBoolTwo"
      | "getNested"
      | "inc"
      | "maxVal"
      | "myEther"
      | "myMap"
      | "myNum"
      | "nested"
      | "overFlow"
      | "remove"
      | "set"
      | "setNested"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "cast", values?: undefined): string;
  encodeFunctionData(functionFragment: "dec", values?: undefined): string;
  encodeFunctionData(functionFragment: "firstBool", values?: undefined): string;
  encodeFunctionData(functionFragment: "get", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "getBoolFour",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "getBoolOne", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "getBoolThree",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "getBoolTwo", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "getNested",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "inc", values?: undefined): string;
  encodeFunctionData(functionFragment: "maxVal", values?: undefined): string;
  encodeFunctionData(functionFragment: "myEther", values?: undefined): string;
  encodeFunctionData(functionFragment: "myMap", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "myNum", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nested",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "overFlow", values?: undefined): string;
  encodeFunctionData(functionFragment: "remove", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "set",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNested",
    values: [AddressLike, BigNumberish, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "cast", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dec", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "firstBool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBoolFour",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBoolOne", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBoolThree",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBoolTwo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getNested", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "inc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxVal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "myEther", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "myMap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "myNum", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nested", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "overFlow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "set", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setNested", data: BytesLike): Result;
}

export interface DataTypes extends BaseContract {
  connect(runner?: ContractRunner | null): DataTypes;
  waitForDeployment(): Promise<this>;

  interface: DataTypesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cast: TypedContractMethod<[], [bigint], "view">;

  dec: TypedContractMethod<[], [bigint], "nonpayable">;

  firstBool: TypedContractMethod<[], [boolean], "view">;

  get: TypedContractMethod<[_addr: AddressLike], [bigint], "view">;

  getBoolFour: TypedContractMethod<[argBool: boolean], [boolean], "view">;

  getBoolOne: TypedContractMethod<[argBool: boolean], [boolean], "view">;

  getBoolThree: TypedContractMethod<[argBool: boolean], [boolean], "view">;

  getBoolTwo: TypedContractMethod<[argBool: boolean], [boolean], "view">;

  getNested: TypedContractMethod<
    [_addr1: AddressLike, _i: BigNumberish],
    [boolean],
    "view"
  >;

  inc: TypedContractMethod<[], [bigint], "view">;

  maxVal: TypedContractMethod<[], [bigint], "view">;

  myEther: TypedContractMethod<[], [bigint], "view">;

  myMap: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  myNum: TypedContractMethod<[], [bigint], "view">;

  nested: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  overFlow: TypedContractMethod<[], [bigint], "nonpayable">;

  remove: TypedContractMethod<[_addr: AddressLike], [void], "nonpayable">;

  set: TypedContractMethod<
    [_addr: AddressLike, _i: BigNumberish],
    [void],
    "nonpayable"
  >;

  setNested: TypedContractMethod<
    [_addr1: AddressLike, _i: BigNumberish, _boo: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cast"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "dec"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "firstBool"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "get"
  ): TypedContractMethod<[_addr: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBoolFour"
  ): TypedContractMethod<[argBool: boolean], [boolean], "view">;
  getFunction(
    nameOrSignature: "getBoolOne"
  ): TypedContractMethod<[argBool: boolean], [boolean], "view">;
  getFunction(
    nameOrSignature: "getBoolThree"
  ): TypedContractMethod<[argBool: boolean], [boolean], "view">;
  getFunction(
    nameOrSignature: "getBoolTwo"
  ): TypedContractMethod<[argBool: boolean], [boolean], "view">;
  getFunction(
    nameOrSignature: "getNested"
  ): TypedContractMethod<
    [_addr1: AddressLike, _i: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "inc"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxVal"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "myEther"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "myMap"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "myNum"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nested"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "overFlow"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "remove"
  ): TypedContractMethod<[_addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "set"
  ): TypedContractMethod<
    [_addr: AddressLike, _i: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setNested"
  ): TypedContractMethod<
    [_addr1: AddressLike, _i: BigNumberish, _boo: boolean],
    [void],
    "nonpayable"
  >;

  filters: {};
}
