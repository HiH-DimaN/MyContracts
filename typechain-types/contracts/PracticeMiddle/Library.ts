/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface LibraryInterface extends Interface {
  getFunction(
    nameOrSignature: "addBook" | "books" | "getBook" | "setBookAvailability"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addBook",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "books", values: [string]): string;
  encodeFunctionData(functionFragment: "getBook", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setBookAvailability",
    values: [string, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "addBook", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "books", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBook", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBookAvailability",
    data: BytesLike
  ): Result;
}

export interface Library extends BaseContract {
  connect(runner?: ContractRunner | null): Library;
  waitForDeployment(): Promise<this>;

  interface: LibraryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addBook: TypedContractMethod<
    [_isbn: string, _title: string, _author: string, _year: BigNumberish],
    [void],
    "nonpayable"
  >;

  books: TypedContractMethod<
    [arg0: string],
    [
      [string, string, bigint, boolean] & {
        title: string;
        author: string;
        year: bigint;
        available: boolean;
      }
    ],
    "view"
  >;

  getBook: TypedContractMethod<
    [_isbn: string],
    [
      [string, string, bigint, boolean] & {
        title: string;
        author: string;
        year: bigint;
        available: boolean;
      }
    ],
    "view"
  >;

  setBookAvailability: TypedContractMethod<
    [_isbn: string, _avialable: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addBook"
  ): TypedContractMethod<
    [_isbn: string, _title: string, _author: string, _year: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "books"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, bigint, boolean] & {
        title: string;
        author: string;
        year: bigint;
        available: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBook"
  ): TypedContractMethod<
    [_isbn: string],
    [
      [string, string, bigint, boolean] & {
        title: string;
        author: string;
        year: bigint;
        available: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setBookAvailability"
  ): TypedContractMethod<
    [_isbn: string, _avialable: boolean],
    [void],
    "nonpayable"
  >;

  filters: {};
}
