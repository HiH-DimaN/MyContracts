/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface VotingWithDelegationInterface extends Interface {
  getFunction(
    nameOrSignature: "delegate" | "proposals" | "registerVoter" | "voters"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ProposalCreated" | "VoteDelegated" | "VoterCast"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "delegate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerVoter",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "voters", values: [AddressLike]): string;

  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voters", data: BytesLike): Result;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [proposalIndex: BigNumberish, description: string];
  export type OutputTuple = [proposalIndex: bigint, description: string];
  export interface OutputObject {
    proposalIndex: bigint;
    description: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteDelegatedEvent {
  export type InputTuple = [delegator: AddressLike, delegate: AddressLike];
  export type OutputTuple = [delegator: string, delegate: string];
  export interface OutputObject {
    delegator: string;
    delegate: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoterCastEvent {
  export type InputTuple = [voter: AddressLike, proposalIndex: BigNumberish];
  export type OutputTuple = [voter: string, proposalIndex: bigint];
  export interface OutputObject {
    voter: string;
    proposalIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VotingWithDelegation extends BaseContract {
  connect(runner?: ContractRunner | null): VotingWithDelegation;
  waitForDeployment(): Promise<this>;

  interface: VotingWithDelegationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  delegate: TypedContractMethod<[_to: AddressLike], [void], "nonpayable">;

  proposals: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { description: string; voteCount: bigint }],
    "view"
  >;

  registerVoter: TypedContractMethod<
    [_voterAddress: AddressLike, _initialWeight: BigNumberish],
    [void],
    "nonpayable"
  >;

  voters: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, boolean, bigint, bigint] & {
        weight: bigint;
        voted: boolean;
        delegate: bigint;
        proposalVoted: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "delegate"
  ): TypedContractMethod<[_to: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "proposals"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { description: string; voteCount: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerVoter"
  ): TypedContractMethod<
    [_voterAddress: AddressLike, _initialWeight: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "voters"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, boolean, bigint, bigint] & {
        weight: bigint;
        voted: boolean;
        delegate: bigint;
        proposalVoted: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "VoteDelegated"
  ): TypedContractEvent<
    VoteDelegatedEvent.InputTuple,
    VoteDelegatedEvent.OutputTuple,
    VoteDelegatedEvent.OutputObject
  >;
  getEvent(
    key: "VoterCast"
  ): TypedContractEvent<
    VoterCastEvent.InputTuple,
    VoterCastEvent.OutputTuple,
    VoterCastEvent.OutputObject
  >;

  filters: {
    "ProposalCreated(uint256,string)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "VoteDelegated(address,address)": TypedContractEvent<
      VoteDelegatedEvent.InputTuple,
      VoteDelegatedEvent.OutputTuple,
      VoteDelegatedEvent.OutputObject
    >;
    VoteDelegated: TypedContractEvent<
      VoteDelegatedEvent.InputTuple,
      VoteDelegatedEvent.OutputTuple,
      VoteDelegatedEvent.OutputObject
    >;

    "VoterCast(address,uint256)": TypedContractEvent<
      VoterCastEvent.InputTuple,
      VoterCastEvent.OutputTuple,
      VoterCastEvent.OutputObject
    >;
    VoterCast: TypedContractEvent<
      VoterCastEvent.InputTuple,
      VoterCastEvent.OutputTuple,
      VoterCastEvent.OutputObject
    >;
  };
}
