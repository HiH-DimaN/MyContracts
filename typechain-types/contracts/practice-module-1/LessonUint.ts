/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface LessonUintInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cast"
      | "dec"
      | "firstBool"
      | "inc"
      | "maxVal"
      | "myEther"
      | "myNum"
      | "notOverFlow"
      | "overFlow"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "cast", values?: undefined): string;
  encodeFunctionData(functionFragment: "dec", values?: undefined): string;
  encodeFunctionData(functionFragment: "firstBool", values?: undefined): string;
  encodeFunctionData(functionFragment: "inc", values?: undefined): string;
  encodeFunctionData(functionFragment: "maxVal", values?: undefined): string;
  encodeFunctionData(functionFragment: "myEther", values?: undefined): string;
  encodeFunctionData(functionFragment: "myNum", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "notOverFlow",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "overFlow", values?: undefined): string;

  decodeFunctionResult(functionFragment: "cast", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "dec", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "firstBool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "inc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxVal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "myEther", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "myNum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "notOverFlow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "overFlow", data: BytesLike): Result;
}

export interface LessonUint extends BaseContract {
  connect(runner?: ContractRunner | null): LessonUint;
  waitForDeployment(): Promise<this>;

  interface: LessonUintInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cast: TypedContractMethod<[], [bigint], "view">;

  dec: TypedContractMethod<[], [bigint], "nonpayable">;

  firstBool: TypedContractMethod<[], [boolean], "view">;

  inc: TypedContractMethod<[], [bigint], "view">;

  maxVal: TypedContractMethod<[], [bigint], "view">;

  myEther: TypedContractMethod<[], [bigint], "view">;

  myNum: TypedContractMethod<[], [bigint], "view">;

  notOverFlow: TypedContractMethod<[], [bigint], "nonpayable">;

  overFlow: TypedContractMethod<[], [bigint], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cast"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "dec"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "firstBool"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "inc"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxVal"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "myEther"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "myNum"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "notOverFlow"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "overFlow"
  ): TypedContractMethod<[], [bigint], "nonpayable">;

  filters: {};
}
