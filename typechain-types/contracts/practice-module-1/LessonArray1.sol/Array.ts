/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface ArrayInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "arr"
      | "arr2"
      | "examples"
      | "get"
      | "getArr"
      | "getLength"
      | "myFixedSizeArr"
      | "pop"
      | "push"
      | "remove"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "arr", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "arr2", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "examples", values?: undefined): string;
  encodeFunctionData(functionFragment: "get", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "getArr", values?: undefined): string;
  encodeFunctionData(functionFragment: "getLength", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "myFixedSizeArr",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "pop", values?: undefined): string;
  encodeFunctionData(functionFragment: "push", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "remove",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "arr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "arr2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "examples", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "get", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getArr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLength", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "myFixedSizeArr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pop", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "push", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "remove", data: BytesLike): Result;
}

export interface Array extends BaseContract {
  connect(runner?: ContractRunner | null): Array;
  waitForDeployment(): Promise<this>;

  interface: ArrayInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  arr: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  arr2: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  examples: TypedContractMethod<[], [void], "view">;

  get: TypedContractMethod<[i: BigNumberish], [bigint], "view">;

  getArr: TypedContractMethod<[], [bigint[]], "view">;

  getLength: TypedContractMethod<[], [bigint], "view">;

  myFixedSizeArr: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  pop: TypedContractMethod<[], [void], "nonpayable">;

  push: TypedContractMethod<[i: BigNumberish], [void], "nonpayable">;

  remove: TypedContractMethod<[index: BigNumberish], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "arr"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "arr2"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "examples"
  ): TypedContractMethod<[], [void], "view">;
  getFunction(
    nameOrSignature: "get"
  ): TypedContractMethod<[i: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getArr"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "myFixedSizeArr"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "pop"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "push"
  ): TypedContractMethod<[i: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "remove"
  ): TypedContractMethod<[index: BigNumberish], [void], "nonpayable">;

  filters: {};
}
