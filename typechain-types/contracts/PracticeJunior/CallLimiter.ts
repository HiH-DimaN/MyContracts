/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface CallLimiterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "callCount"
      | "deposit"
      | "limitedFunction"
      | "maxCalls"
      | "owner"
      | "resetCounter"
      | "rewardAmount"
      | "updateMaxCalls"
      | "updateRewardAmount"
      | "withdraw"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "FunctionCalled"): EventFragment;

  encodeFunctionData(functionFragment: "callCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "limitedFunction",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxCalls", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "resetCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaxCalls",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewardAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "callCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "limitedFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxCalls", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resetCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaxCalls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace FunctionCalledEvent {
  export type InputTuple = [
    caller: AddressLike,
    callNumber: BigNumberish,
    reward: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    callNumber: bigint,
    reward: bigint
  ];
  export interface OutputObject {
    caller: string;
    callNumber: bigint;
    reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface CallLimiter extends BaseContract {
  connect(runner?: ContractRunner | null): CallLimiter;
  waitForDeployment(): Promise<this>;

  interface: CallLimiterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  callCount: TypedContractMethod<[], [bigint], "view">;

  deposit: TypedContractMethod<[], [void], "payable">;

  limitedFunction: TypedContractMethod<[], [void], "nonpayable">;

  maxCalls: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  resetCounter: TypedContractMethod<[], [void], "nonpayable">;

  rewardAmount: TypedContractMethod<[], [bigint], "view">;

  updateMaxCalls: TypedContractMethod<
    [_maxCalls: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateRewardAmount: TypedContractMethod<
    [_rewardAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<[], [void], "payable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "callCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "limitedFunction"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "maxCalls"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "resetCounter"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateMaxCalls"
  ): TypedContractMethod<[_maxCalls: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateRewardAmount"
  ): TypedContractMethod<[_rewardAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "payable">;

  getEvent(
    key: "FunctionCalled"
  ): TypedContractEvent<
    FunctionCalledEvent.InputTuple,
    FunctionCalledEvent.OutputTuple,
    FunctionCalledEvent.OutputObject
  >;

  filters: {
    "FunctionCalled(address,uint256,uint256)": TypedContractEvent<
      FunctionCalledEvent.InputTuple,
      FunctionCalledEvent.OutputTuple,
      FunctionCalledEvent.OutputObject
    >;
    FunctionCalled: TypedContractEvent<
      FunctionCalledEvent.InputTuple,
      FunctionCalledEvent.OutputTuple,
      FunctionCalledEvent.OutputObject
    >;
  };
}
