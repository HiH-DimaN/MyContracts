/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface ErrorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "num"
      | "testAssert"
      | "testCustomError"
      | "testRequire"
      | "testRevert"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "num", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "testAssert",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "testCustomError",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testRequire",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "testRevert",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "num", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "testAssert", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "testCustomError",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "testRequire",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "testRevert", data: BytesLike): Result;
}

export interface Error extends BaseContract {
  connect(runner?: ContractRunner | null): Error;
  waitForDeployment(): Promise<this>;

  interface: ErrorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  num: TypedContractMethod<[], [bigint], "view">;

  testAssert: TypedContractMethod<[], [void], "view">;

  testCustomError: TypedContractMethod<
    [_withdrawAmount: BigNumberish],
    [void],
    "view"
  >;

  testRequire: TypedContractMethod<[_i: BigNumberish], [void], "view">;

  testRevert: TypedContractMethod<[_i: BigNumberish], [void], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "num"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "testAssert"
  ): TypedContractMethod<[], [void], "view">;
  getFunction(
    nameOrSignature: "testCustomError"
  ): TypedContractMethod<[_withdrawAmount: BigNumberish], [void], "view">;
  getFunction(
    nameOrSignature: "testRequire"
  ): TypedContractMethod<[_i: BigNumberish], [void], "view">;
  getFunction(
    nameOrSignature: "testRevert"
  ): TypedContractMethod<[_i: BigNumberish], [void], "view">;

  filters: {};
}
