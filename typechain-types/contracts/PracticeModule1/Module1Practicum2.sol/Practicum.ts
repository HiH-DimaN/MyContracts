/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface PracticumInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addToGroup"
      | "addToNestedMapping"
      | "addToPersonArrayMapping"
      | "addToPersonMapping"
      | "computeSumFromNestedMapping"
      | "getNestedMappingValue"
      | "groups"
      | "nestedMapping"
      | "personArrayMapping"
      | "personMapping"
      | "personsArray"
      | "removeFromNestedMapping"
      | "removeFromPersonArrayMapping"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addToGroup",
    values: [BigNumberish, AddressLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addToNestedMapping",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addToPersonArrayMapping",
    values: [AddressLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addToPersonMapping",
    values: [AddressLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "computeSumFromNestedMapping",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNestedMappingValue",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "groups",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nestedMapping",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "personArrayMapping",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "personMapping",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "personsArray",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromNestedMapping",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromPersonArrayMapping",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addToGroup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addToNestedMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToPersonArrayMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToPersonMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeSumFromNestedMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNestedMappingValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "groups", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nestedMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "personArrayMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "personMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "personsArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromNestedMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromPersonArrayMapping",
    data: BytesLike
  ): Result;
}

export interface Practicum extends BaseContract {
  connect(runner?: ContractRunner | null): Practicum;
  waitForDeployment(): Promise<this>;

  interface: PracticumInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addToGroup: TypedContractMethod<
    [
      _groupId: BigNumberish,
      _memberAddress: AddressLike,
      _name: string,
      _age: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  addToNestedMapping: TypedContractMethod<
    [_key1: AddressLike, _key2: BigNumberish, _value: BigNumberish],
    [void],
    "nonpayable"
  >;

  addToPersonArrayMapping: TypedContractMethod<
    [_key: AddressLike, _name: string, _age: BigNumberish],
    [void],
    "nonpayable"
  >;

  addToPersonMapping: TypedContractMethod<
    [_key: AddressLike, _name: string, _age: BigNumberish],
    [void],
    "nonpayable"
  >;

  computeSumFromNestedMapping: TypedContractMethod<
    [_key1: AddressLike, _key2: BigNumberish, _value: BigNumberish],
    [bigint],
    "view"
  >;

  getNestedMappingValue: TypedContractMethod<
    [_key1: AddressLike, _key2: BigNumberish],
    [bigint],
    "view"
  >;

  groups: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  nestedMapping: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  personArrayMapping: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[string, bigint] & { name: string; age: bigint }],
    "view"
  >;

  personMapping: TypedContractMethod<
    [arg0: AddressLike],
    [[string, bigint] & { name: string; age: bigint }],
    "view"
  >;

  personsArray: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { name: string; age: bigint }],
    "view"
  >;

  removeFromNestedMapping: TypedContractMethod<
    [_key1: AddressLike, _key2: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeFromPersonArrayMapping: TypedContractMethod<
    [_key: AddressLike, _index: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addToGroup"
  ): TypedContractMethod<
    [
      _groupId: BigNumberish,
      _memberAddress: AddressLike,
      _name: string,
      _age: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addToNestedMapping"
  ): TypedContractMethod<
    [_key1: AddressLike, _key2: BigNumberish, _value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addToPersonArrayMapping"
  ): TypedContractMethod<
    [_key: AddressLike, _name: string, _age: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addToPersonMapping"
  ): TypedContractMethod<
    [_key: AddressLike, _name: string, _age: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "computeSumFromNestedMapping"
  ): TypedContractMethod<
    [_key1: AddressLike, _key2: BigNumberish, _value: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNestedMappingValue"
  ): TypedContractMethod<
    [_key1: AddressLike, _key2: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "groups"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "nestedMapping"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "personArrayMapping"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [[string, bigint] & { name: string; age: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "personMapping"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[string, bigint] & { name: string; age: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "personsArray"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, bigint] & { name: string; age: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeFromNestedMapping"
  ): TypedContractMethod<
    [_key1: AddressLike, _key2: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeFromPersonArrayMapping"
  ): TypedContractMethod<
    [_key: AddressLike, _index: BigNumberish],
    [void],
    "nonpayable"
  >;

  filters: {};
}
