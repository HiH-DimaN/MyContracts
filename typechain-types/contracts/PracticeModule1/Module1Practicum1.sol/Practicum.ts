/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface PracticumInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addToFixedArray"
      | "addToFixedArrayAndEmit"
      | "addressToUintMapping"
      | "assWithArguvents"
      | "boolVariable"
      | "changeOwner"
      | "decrementByConstant"
      | "deleteFromFixedArray"
      | "deleteFrovDynamicArray"
      | "dynamicArray"
      | "fixedArray"
      | "getArrayValue"
      | "getDynamicArrayLength"
      | "incrementUint"
      | "owner"
      | "populateArray"
      | "resetMappingAndSetStatus"
      | "revertOnMappingChange"
      | "safeAddition"
      | "setMappingValue"
      | "status"
      | "stringVariablr"
      | "ternarnyCheck"
      | "uintVariable"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "OwnerChanged" | "ValueChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addToFixedArray",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addToFixedArrayAndEmit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addressToUintMapping",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assWithArguvents",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "boolVariable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decrementByConstant",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deleteFromFixedArray",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteFrovDynamicArray",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dynamicArray",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fixedArray",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getArrayValue",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDynamicArrayLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incrementUint",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "populateArray",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetMappingAndSetStatus",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revertOnMappingChange",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeAddition",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMappingValue",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stringVariablr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ternarnyCheck",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uintVariable",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addToFixedArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addToFixedArrayAndEmit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressToUintMapping",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assWithArguvents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "boolVariable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decrementByConstant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteFromFixedArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteFrovDynamicArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "dynamicArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fixedArray", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getArrayValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDynamicArrayLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incrementUint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "populateArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetMappingAndSetStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertOnMappingChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeAddition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMappingValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stringVariablr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ternarnyCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uintVariable",
    data: BytesLike
  ): Result;
}

export namespace OwnerChangedEvent {
  export type InputTuple = [newOwner: AddressLike];
  export type OutputTuple = [newOwner: string];
  export interface OutputObject {
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValueChangedEvent {
  export type InputTuple = [newValue: BigNumberish];
  export type OutputTuple = [newValue: bigint];
  export interface OutputObject {
    newValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Practicum extends BaseContract {
  connect(runner?: ContractRunner | null): Practicum;
  waitForDeployment(): Promise<this>;

  interface: PracticumInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addToFixedArray: TypedContractMethod<
    [_value1: BigNumberish, _value2: BigNumberish, _value3: BigNumberish],
    [void],
    "nonpayable"
  >;

  addToFixedArrayAndEmit: TypedContractMethod<
    [_value: BigNumberish],
    [void],
    "nonpayable"
  >;

  addressToUintMapping: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  assWithArguvents: TypedContractMethod<
    [_value: BigNumberish],
    [bigint],
    "view"
  >;

  boolVariable: TypedContractMethod<[], [boolean], "view">;

  changeOwner: TypedContractMethod<
    [_newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  decrementByConstant: TypedContractMethod<[], [void], "nonpayable">;

  deleteFromFixedArray: TypedContractMethod<
    [index: BigNumberish],
    [void],
    "nonpayable"
  >;

  deleteFrovDynamicArray: TypedContractMethod<
    [index: BigNumberish],
    [void],
    "nonpayable"
  >;

  dynamicArray: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  fixedArray: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  getArrayValue: TypedContractMethod<[index: BigNumberish], [bigint], "view">;

  getDynamicArrayLength: TypedContractMethod<[], [bigint], "view">;

  incrementUint: TypedContractMethod<[], [void], "nonpayable">;

  owner: TypedContractMethod<[], [string], "view">;

  populateArray: TypedContractMethod<[], [void], "nonpayable">;

  resetMappingAndSetStatus: TypedContractMethod<
    [_addr: AddressLike],
    [void],
    "nonpayable"
  >;

  revertOnMappingChange: TypedContractMethod<
    [_addr: AddressLike, _value: BigNumberish],
    [void],
    "nonpayable"
  >;

  safeAddition: TypedContractMethod<
    [_a: BigNumberish, _b: BigNumberish],
    [bigint],
    "view"
  >;

  setMappingValue: TypedContractMethod<
    [_addr: AddressLike, _value: BigNumberish],
    [void],
    "nonpayable"
  >;

  status: TypedContractMethod<[], [bigint], "view">;

  stringVariablr: TypedContractMethod<[], [string], "view">;

  ternarnyCheck: TypedContractMethod<[_value: BigNumberish], [bigint], "view">;

  uintVariable: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addToFixedArray"
  ): TypedContractMethod<
    [_value1: BigNumberish, _value2: BigNumberish, _value3: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addToFixedArrayAndEmit"
  ): TypedContractMethod<[_value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addressToUintMapping"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "assWithArguvents"
  ): TypedContractMethod<[_value: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "boolVariable"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "changeOwner"
  ): TypedContractMethod<[_newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "decrementByConstant"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deleteFromFixedArray"
  ): TypedContractMethod<[index: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deleteFrovDynamicArray"
  ): TypedContractMethod<[index: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "dynamicArray"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "fixedArray"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getArrayValue"
  ): TypedContractMethod<[index: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDynamicArrayLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "incrementUint"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "populateArray"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "resetMappingAndSetStatus"
  ): TypedContractMethod<[_addr: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revertOnMappingChange"
  ): TypedContractMethod<
    [_addr: AddressLike, _value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeAddition"
  ): TypedContractMethod<
    [_a: BigNumberish, _b: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "setMappingValue"
  ): TypedContractMethod<
    [_addr: AddressLike, _value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "status"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "stringVariablr"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ternarnyCheck"
  ): TypedContractMethod<[_value: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "uintVariable"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "OwnerChanged"
  ): TypedContractEvent<
    OwnerChangedEvent.InputTuple,
    OwnerChangedEvent.OutputTuple,
    OwnerChangedEvent.OutputObject
  >;
  getEvent(
    key: "ValueChanged"
  ): TypedContractEvent<
    ValueChangedEvent.InputTuple,
    ValueChangedEvent.OutputTuple,
    ValueChangedEvent.OutputObject
  >;

  filters: {
    "OwnerChanged(address)": TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;
    OwnerChanged: TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;

    "ValueChanged(uint256)": TypedContractEvent<
      ValueChangedEvent.InputTuple,
      ValueChangedEvent.OutputTuple,
      ValueChangedEvent.OutputObject
    >;
    ValueChanged: TypedContractEvent<
      ValueChangedEvent.InputTuple,
      ValueChangedEvent.OutputTuple,
      ValueChangedEvent.OutputObject
    >;
  };
}
