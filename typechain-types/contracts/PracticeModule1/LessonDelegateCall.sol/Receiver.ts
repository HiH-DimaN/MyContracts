/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface ReceiverInterface extends Interface {
  getFunction(
    nameOrSignature: "receiveEther1" | "receiveEther2" | "receiveEther3"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "EtherReceived"): EventFragment;

  encodeFunctionData(
    functionFragment: "receiveEther1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiveEther2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiveEther3",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "receiveEther1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveEther2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveEther3",
    data: BytesLike
  ): Result;
}

export namespace EtherReceivedEvent {
  export type InputTuple = [
    sender: AddressLike,
    amount: BigNumberish,
    method: string
  ];
  export type OutputTuple = [sender: string, amount: bigint, method: string];
  export interface OutputObject {
    sender: string;
    amount: bigint;
    method: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Receiver extends BaseContract {
  connect(runner?: ContractRunner | null): Receiver;
  waitForDeployment(): Promise<this>;

  interface: ReceiverInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  receiveEther1: TypedContractMethod<[], [void], "payable">;

  receiveEther2: TypedContractMethod<[], [void], "payable">;

  receiveEther3: TypedContractMethod<[param: BigNumberish], [void], "payable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "receiveEther1"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "receiveEther2"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "receiveEther3"
  ): TypedContractMethod<[param: BigNumberish], [void], "payable">;

  getEvent(
    key: "EtherReceived"
  ): TypedContractEvent<
    EtherReceivedEvent.InputTuple,
    EtherReceivedEvent.OutputTuple,
    EtherReceivedEvent.OutputObject
  >;

  filters: {
    "EtherReceived(address,uint256,string)": TypedContractEvent<
      EtherReceivedEvent.InputTuple,
      EtherReceivedEvent.OutputTuple,
      EtherReceivedEvent.OutputObject
    >;
    EtherReceived: TypedContractEvent<
      EtherReceivedEvent.InputTuple,
      EtherReceivedEvent.OutputTuple,
      EtherReceivedEvent.OutputObject
    >;
  };
}
