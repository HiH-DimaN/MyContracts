/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface LessonUintPracticeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getTrue"
      | "inc"
      | "incVar"
      | "myVar"
      | "secVar"
      | "showMax"
      | "threeVar"
      | "varBool1"
      | "varBool2"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "getTrue", values?: undefined): string;
  encodeFunctionData(functionFragment: "inc", values?: undefined): string;
  encodeFunctionData(functionFragment: "incVar", values?: undefined): string;
  encodeFunctionData(functionFragment: "myVar", values?: undefined): string;
  encodeFunctionData(functionFragment: "secVar", values?: undefined): string;
  encodeFunctionData(functionFragment: "showMax", values?: undefined): string;
  encodeFunctionData(functionFragment: "threeVar", values?: undefined): string;
  encodeFunctionData(functionFragment: "varBool1", values?: undefined): string;
  encodeFunctionData(functionFragment: "varBool2", values?: undefined): string;

  decodeFunctionResult(functionFragment: "getTrue", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "inc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "incVar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "myVar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "secVar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "showMax", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "threeVar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "varBool1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "varBool2", data: BytesLike): Result;
}

export interface LessonUintPractice extends BaseContract {
  connect(runner?: ContractRunner | null): LessonUintPractice;
  waitForDeployment(): Promise<this>;

  interface: LessonUintPracticeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getTrue: TypedContractMethod<[], [boolean], "view">;

  inc: TypedContractMethod<[], [bigint], "nonpayable">;

  incVar: TypedContractMethod<[], [bigint], "view">;

  myVar: TypedContractMethod<[], [bigint], "view">;

  secVar: TypedContractMethod<[], [bigint], "view">;

  showMax: TypedContractMethod<[], [bigint], "view">;

  threeVar: TypedContractMethod<[], [bigint], "view">;

  varBool1: TypedContractMethod<[], [boolean], "view">;

  varBool2: TypedContractMethod<[], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getTrue"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "inc"
  ): TypedContractMethod<[], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "incVar"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "myVar"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "secVar"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "showMax"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "threeVar"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "varBool1"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "varBool2"
  ): TypedContractMethod<[], [boolean], "view">;

  filters: {};
}
