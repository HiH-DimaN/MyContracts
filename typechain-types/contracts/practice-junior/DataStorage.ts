/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface DataStorageInterface extends Interface {
  getFunction(
    nameOrSignature: "data" | "getData" | "setData"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "DataUpdated"): EventFragment;

  encodeFunctionData(functionFragment: "data", values?: undefined): string;
  encodeFunctionData(functionFragment: "getData", values?: undefined): string;
  encodeFunctionData(functionFragment: "setData", values: [string]): string;

  decodeFunctionResult(functionFragment: "data", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setData", data: BytesLike): Result;
}

export namespace DataUpdatedEvent {
  export type InputTuple = [oldData: string, newData: string];
  export type OutputTuple = [oldData: string, newData: string];
  export interface OutputObject {
    oldData: string;
    newData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DataStorage extends BaseContract {
  connect(runner?: ContractRunner | null): DataStorage;
  waitForDeployment(): Promise<this>;

  interface: DataStorageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  data: TypedContractMethod<[], [string], "view">;

  getData: TypedContractMethod<[], [string], "view">;

  setData: TypedContractMethod<[newData: string], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "data"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getData"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setData"
  ): TypedContractMethod<[newData: string], [void], "nonpayable">;

  getEvent(
    key: "DataUpdated"
  ): TypedContractEvent<
    DataUpdatedEvent.InputTuple,
    DataUpdatedEvent.OutputTuple,
    DataUpdatedEvent.OutputObject
  >;

  filters: {
    "DataUpdated(string,string)": TypedContractEvent<
      DataUpdatedEvent.InputTuple,
      DataUpdatedEvent.OutputTuple,
      DataUpdatedEvent.OutputObject
    >;
    DataUpdated: TypedContractEvent<
      DataUpdatedEvent.InputTuple,
      DataUpdatedEvent.OutputTuple,
      DataUpdatedEvent.OutputObject
    >;
  };
}
